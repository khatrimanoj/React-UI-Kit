{"ast":null,"code":"var _jsxFileName = \"/home/mindbox/Documents/manoj/nexus/src/components/ProgressIndicators/Types/LinearIndicator.js\";\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\n\nclass LinearIndicator extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      data: this.props.data,\n      valueNow: this.props.valueNow,\n      progress: this.props.progress\n    };\n  }\n\n  render() {\n    const [completed, setCompleted] = React.useState(0);\n    const [buffer, setBuffer] = React.useState(10);\n    const progress = React.useRef(() => {});\n    React.useEffect(() => {\n      progress.current = () => {\n        if (completed > 100) {\n          setCompleted(0);\n          setBuffer(10);\n        } else {\n          const diff = Math.random() * 10;\n          const diff2 = Math.random() * 10;\n          setCompleted(completed + diff);\n          setBuffer(completed + diff + diff2);\n        }\n      };\n    });\n    React.useEffect(() => {\n      function tick() {\n        progress.current();\n      }\n\n      const timer = setInterval(tick, 500);\n      return () => {\n        clearInterval(timer);\n      };\n    }, []);\n    return React.createElement(React.Fragment, null, React.createElement(\"div\", {\n      className: \"progress\",\n      role: \"progressbar\",\n      \"aria-valuenow\": this.state.valueNow,\n      \"aria-valuemin\": \"0\",\n      \"aria-valuemax\": \"100\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 43\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"bar\",\n      style: {\n        width: `${this.state.progress}`\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 44\n      },\n      __self: this\n    })), React.createElement(\"p\", {\n      className: \"text-gray caption\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 46\n      },\n      __self: this\n    }, this.state.data));\n  }\n\n}\n\nLinearIndicator.propTypes = {\n  step: PropTypes.any.isRequired,\n  valueNow: PropTypes.any.isRequired\n};\nexport default LinearIndicator;","map":{"version":3,"sources":["/home/mindbox/Documents/manoj/nexus/src/components/ProgressIndicators/Types/LinearIndicator.js"],"names":["React","Component","PropTypes","LinearIndicator","state","data","props","valueNow","progress","render","completed","setCompleted","useState","buffer","setBuffer","useRef","useEffect","current","diff","Math","random","diff2","tick","timer","setInterval","clearInterval","width","propTypes","step","any","isRequired"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,SAAP,MAAsB,YAAtB;;AAEA,MAAMC,eAAN,SAA8BF,SAA9B,CAAwC;AAAA;AAAA;AAAA,SACpCG,KADoC,GAC5B;AACJC,MAAAA,IAAI,EAAE,KAAKC,KAAL,CAAWD,IADb;AAEJE,MAAAA,QAAQ,EAAE,KAAKD,KAAL,CAAWC,QAFjB;AAGJC,MAAAA,QAAQ,EAAE,KAAKF,KAAL,CAAWE;AAHjB,KAD4B;AAAA;;AAOpCC,EAAAA,MAAM,GAAG;AACL,UAAM,CAACC,SAAD,EAAYC,YAAZ,IAA4BX,KAAK,CAACY,QAAN,CAAe,CAAf,CAAlC;AACA,UAAM,CAACC,MAAD,EAASC,SAAT,IAAsBd,KAAK,CAACY,QAAN,CAAe,EAAf,CAA5B;AAEA,UAAMJ,QAAQ,GAAGR,KAAK,CAACe,MAAN,CAAa,MAAM,CAAE,CAArB,CAAjB;AACAf,IAAAA,KAAK,CAACgB,SAAN,CAAgB,MAAM;AAClBR,MAAAA,QAAQ,CAACS,OAAT,GAAmB,MAAM;AACrB,YAAIP,SAAS,GAAG,GAAhB,EAAqB;AACrBC,UAAAA,YAAY,CAAC,CAAD,CAAZ;AACAG,UAAAA,SAAS,CAAC,EAAD,CAAT;AACC,SAHD,MAGO;AACP,gBAAMI,IAAI,GAAGC,IAAI,CAACC,MAAL,KAAgB,EAA7B;AACA,gBAAMC,KAAK,GAAGF,IAAI,CAACC,MAAL,KAAgB,EAA9B;AACAT,UAAAA,YAAY,CAACD,SAAS,GAAGQ,IAAb,CAAZ;AACAJ,UAAAA,SAAS,CAACJ,SAAS,GAAGQ,IAAZ,GAAmBG,KAApB,CAAT;AACC;AACJ,OAVD;AAWH,KAZD;AAcArB,IAAAA,KAAK,CAACgB,SAAN,CAAgB,MAAM;AAClB,eAASM,IAAT,GAAgB;AACZd,QAAAA,QAAQ,CAACS,OAAT;AACH;;AACD,YAAMM,KAAK,GAAGC,WAAW,CAACF,IAAD,EAAO,GAAP,CAAzB;AAEA,aAAO,MAAM;AACTG,QAAAA,aAAa,CAACF,KAAD,CAAb;AACH,OAFD;AAGH,KATD,EASG,EATH;AAUA,WACI,0CAEI;AAAK,MAAA,SAAS,EAAC,UAAf;AAA0B,MAAA,IAAI,EAAC,aAA/B;AAA6C,uBAAe,KAAKnB,KAAL,CAAWG,QAAvE;AAAiF,uBAAc,GAA/F;AAAmG,uBAAc,KAAjH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI;AAAK,MAAA,SAAS,EAAC,KAAf;AAAqB,MAAA,KAAK,EAAE;AAACmB,QAAAA,KAAK,EAAG,GAAE,KAAKtB,KAAL,CAAWI,QAAS;AAA/B,OAA5B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADJ,CAFJ,EAKI;AAAG,MAAA,SAAS,EAAC,mBAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAkC,KAAKJ,KAAL,CAAWC,IAA7C,CALJ,CADJ;AASH;;AA7CmC;;AAgDxCF,eAAe,CAACwB,SAAhB,GAA4B;AACxBC,EAAAA,IAAI,EAAE1B,SAAS,CAAC2B,GAAV,CAAcC,UADI;AAExBvB,EAAAA,QAAQ,EAAEL,SAAS,CAAC2B,GAAV,CAAcC;AAFA,CAA5B;AAKA,eAAe3B,eAAf","sourcesContent":["import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\n\nclass LinearIndicator extends Component {\n    state = {\n        data: this.props.data,\n        valueNow: this.props.valueNow,\n        progress: this.props.progress,\n    }\n    \n    render() {\n        const [completed, setCompleted] = React.useState(0);\n        const [buffer, setBuffer] = React.useState(10);\n    \n        const progress = React.useRef(() => {});\n        React.useEffect(() => {\n            progress.current = () => {\n                if (completed > 100) {\n                setCompleted(0);\n                setBuffer(10);\n                } else {\n                const diff = Math.random() * 10;\n                const diff2 = Math.random() * 10;\n                setCompleted(completed + diff);\n                setBuffer(completed + diff + diff2);\n                }\n            };\n        });\n    \n        React.useEffect(() => {\n            function tick() {\n                progress.current();\n            }\n            const timer = setInterval(tick, 500);\n        \n            return () => {\n                clearInterval(timer);\n            };\n        }, []);\n        return (\n            <>\n                {/* navigational progress bar */}\n                <div className=\"progress\" role=\"progressbar\" aria-valuenow={this.state.valueNow} aria-valuemin=\"0\" aria-valuemax=\"100\">\n                    <div className=\"bar\" style={{width: `${this.state.progress}`}}></div>\n                </div>\n                <p className=\"text-gray caption\">{this.state.data}</p>\n            </>\n        );\n    }\n}\n\nLinearIndicator.propTypes = {\n    step: PropTypes.any.isRequired,\n    valueNow: PropTypes.any.isRequired\n}\n  \nexport default LinearIndicator;"]},"metadata":{},"sourceType":"module"}