{"ast":null,"code":"var _jsxFileName = \"/home/mindbox/Documents/manoj/nexus/src/components/ProgressIndicators/Types/BufferingIndicator.js\";\nimport React from 'react';\nimport LinearIndicator from './LinearIndicator';\nexport default function LinearBuffer() {\n  const [completed, setCompleted] = React.useState(0);\n  const [buffer, setBuffer] = React.useState(10);\n  const progress = React.useRef(() => {});\n  React.useEffect(() => {\n    progress.current = () => {\n      if (completed > 100) {\n        setCompleted(0);\n        setBuffer(10);\n      } else {\n        const diff = Math.random() * 10;\n        const diff2 = Math.random() * 10;\n        setCompleted(completed + diff);\n        setBuffer(completed + diff + diff2);\n      }\n    };\n  });\n  React.useEffect(() => {\n    function tick() {\n      progress.current();\n    }\n\n    const timer = setInterval(tick, 500);\n    return () => {\n      clearInterval(timer);\n    };\n  }, []);\n  return React.createElement(\"div\", {\n    className: classes.root,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 35\n    },\n    __self: this\n  }, React.createElement(LinearIndicator, {\n    variant: \"buffer\",\n    value: completed,\n    valueBuffer: buffer,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 36\n    },\n    __self: this\n  }), React.createElement(LinearIndicator, {\n    variant: \"buffer\",\n    value: completed,\n    valueBuffer: buffer,\n    color: \"secondary\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 37\n    },\n    __self: this\n  }));\n}","map":{"version":3,"sources":["/home/mindbox/Documents/manoj/nexus/src/components/ProgressIndicators/Types/BufferingIndicator.js"],"names":["React","LinearIndicator","LinearBuffer","completed","setCompleted","useState","buffer","setBuffer","progress","useRef","useEffect","current","diff","Math","random","diff2","tick","timer","setInterval","clearInterval","classes","root"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,eAAP,MAA4B,mBAA5B;AAEA,eAAe,SAASC,YAAT,GAAwB;AACnC,QAAM,CAACC,SAAD,EAAYC,YAAZ,IAA4BJ,KAAK,CAACK,QAAN,CAAe,CAAf,CAAlC;AACA,QAAM,CAACC,MAAD,EAASC,SAAT,IAAsBP,KAAK,CAACK,QAAN,CAAe,EAAf,CAA5B;AAEA,QAAMG,QAAQ,GAAGR,KAAK,CAACS,MAAN,CAAa,MAAM,CAAE,CAArB,CAAjB;AACAT,EAAAA,KAAK,CAACU,SAAN,CAAgB,MAAM;AACpBF,IAAAA,QAAQ,CAACG,OAAT,GAAmB,MAAM;AACvB,UAAIR,SAAS,GAAG,GAAhB,EAAqB;AACnBC,QAAAA,YAAY,CAAC,CAAD,CAAZ;AACAG,QAAAA,SAAS,CAAC,EAAD,CAAT;AACD,OAHD,MAGO;AACL,cAAMK,IAAI,GAAGC,IAAI,CAACC,MAAL,KAAgB,EAA7B;AACA,cAAMC,KAAK,GAAGF,IAAI,CAACC,MAAL,KAAgB,EAA9B;AACAV,QAAAA,YAAY,CAACD,SAAS,GAAGS,IAAb,CAAZ;AACAL,QAAAA,SAAS,CAACJ,SAAS,GAAGS,IAAZ,GAAmBG,KAApB,CAAT;AACD;AACF,KAVD;AAWD,GAZD;AAcAf,EAAAA,KAAK,CAACU,SAAN,CAAgB,MAAM;AACpB,aAASM,IAAT,GAAgB;AACdR,MAAAA,QAAQ,CAACG,OAAT;AACD;;AACD,UAAMM,KAAK,GAAGC,WAAW,CAACF,IAAD,EAAO,GAAP,CAAzB;AAEA,WAAO,MAAM;AACXG,MAAAA,aAAa,CAACF,KAAD,CAAb;AACD,KAFD;AAGD,GATD,EASG,EATH;AAWA,SACE;AAAK,IAAA,SAAS,EAAEG,OAAO,CAACC,IAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,oBAAC,eAAD;AAAiB,IAAA,OAAO,EAAC,QAAzB;AAAkC,IAAA,KAAK,EAAElB,SAAzC;AAAoD,IAAA,WAAW,EAAEG,MAAjE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,EAEE,oBAAC,eAAD;AAAiB,IAAA,OAAO,EAAC,QAAzB;AAAkC,IAAA,KAAK,EAAEH,SAAzC;AAAoD,IAAA,WAAW,EAAEG,MAAjE;AAAyE,IAAA,KAAK,EAAC,WAA/E;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFF,CADF;AAMD","sourcesContent":["import React from 'react';\nimport LinearIndicator from './LinearIndicator';\n\nexport default function LinearBuffer() {\n    const [completed, setCompleted] = React.useState(0);\n    const [buffer, setBuffer] = React.useState(10);\n  \n    const progress = React.useRef(() => {});\n    React.useEffect(() => {\n      progress.current = () => {\n        if (completed > 100) {\n          setCompleted(0);\n          setBuffer(10);\n        } else {\n          const diff = Math.random() * 10;\n          const diff2 = Math.random() * 10;\n          setCompleted(completed + diff);\n          setBuffer(completed + diff + diff2);\n        }\n      };\n    });\n  \n    React.useEffect(() => {\n      function tick() {\n        progress.current();\n      }\n      const timer = setInterval(tick, 500);\n  \n      return () => {\n        clearInterval(timer);\n      };\n    }, []);\n  \n    return (\n      <div className={classes.root}>\n        <LinearIndicator variant=\"buffer\" value={completed} valueBuffer={buffer} />\n        <LinearIndicator variant=\"buffer\" value={completed} valueBuffer={buffer} color=\"secondary\" />\n      </div>\n    );\n  }\n"]},"metadata":{},"sourceType":"module"}