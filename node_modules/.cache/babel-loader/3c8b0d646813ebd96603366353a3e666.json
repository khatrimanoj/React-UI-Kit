{"ast":null,"code":"var _jsxFileName = \"/home/mindbox/Documents/manoj/nexus/src/components/Carousel/Types/NumberCountCarousel.js\";\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport isNil from 'lodash/isNil';\nimport config from '../Config';\nimport has from 'lodash/has';\nimport Card from '../../Magazines/Cardtags/card/card';\nimport Cardimg from '../../Magazines/Cardtags/cardimage/Cardimg';\nimport Cardoverlay from '../../Magazines/Cardtags/Cardoverlay/Cardoverlay';\nimport Detail from '../../Magazines/Cardtags/carddetail/carddetail';\nimport Button from '../../button/buttonprop/buttonprop';\nimport Cardheading from '../../Magazines/Cardtags/Carddescription/cardheading';\nimport CardDT from '../../Magazines/Cardtags/Carddescription/cardDT';\nimport Action from '../../Magazines/Cardtags/Cardaction/Cardaction';\nimport CardFooter from '../../Magazines/Cardtags/Cardfooter/Cardfooter';\nimport { Icon } from 'react-icons-kit';\nimport C10 from '../../../images/carousel/Card_Carousel.png';\nimport { heart } from 'react-icons-kit/feather/heart';\nimport { thumbsUp } from 'react-icons-kit/feather/thumbsUp';\nimport { messageSquare } from 'react-icons-kit/feather/messageSquare';\nimport Carousel from '../CarouselWrapper';\nimport CarouselDots from '../CarouselDots';\nimport classnames from 'classnames';\nimport '../Carousel.css';\n\nclass NumberCountCarousel extends Component {\n  constructor(...args) {\n    super(...args);\n\n    this.clamp = value => {\n      const maxValue = this.getChildren().length - 1;\n\n      if (value > maxValue) {\n        return maxValue;\n      }\n\n      if (value < 0) {\n        return 0;\n      }\n\n      return value;\n    };\n\n    this.changeSlide = value => this.props.onChange(this.getProp('infinite') ? value : this.clamp(value));\n\n    this.nextSlide = () => this.changeSlide(this.getCurrentValue() + this.getProp('slidesPerScroll'));\n\n    this.prevSlide = () => this.changeSlide(this.getCurrentValue() - this.getProp('slidesPerScroll'));\n\n    this.getCurrentValue = () => this.props.infinite ? this.props.value : this.clamp(this.props.value);\n\n    this.getNeededAdditionalClones = () => Math.ceil((this.getCurrentValue() - this.state.infiniteTransitionFrom) / this.getChildren().length);\n\n    this.getAdditionalClonesLeft = () => {\n      const additionalClones = this.getNeededAdditionalClones();\n      return additionalClones < 0 ? -additionalClones : 0;\n    };\n\n    this.getAdditionalClonesRight = () => {\n      const additionalClones = this.getNeededAdditionalClones();\n      return additionalClones > 0 ? additionalClones : 0;\n    };\n\n    this.getClonesLeft = () => config.numberOfInfiniteClones + this.getAdditionalClonesLeft();\n\n    this.getClonesRight = () => config.numberOfInfiniteClones + this.getAdditionalClonesRight();\n\n    this.getAdditionalClonesOffset = () => -this.getChildren().length * this.getCarouselElementWidth() * this.getAdditionalClonesLeft();\n\n    this.getProp = (propName, customProps = null) => {\n      const props = customProps || this.props;\n      let activeBreakpoint = null;\n\n      if (props.breakpoints) {\n        const windowWidth = this.state.windowWidth;\n        const resolutions = Object.keys(props.breakpoints);\n        resolutions.forEach(resolutionString => {\n          const resolution = parseInt(resolutionString);\n\n          if (windowWidth <= resolution) {\n            if (!activeBreakpoint || activeBreakpoint > resolution) {\n              activeBreakpoint = resolution;\n            }\n          }\n        });\n      }\n\n      if (activeBreakpoint) {\n        if (has(props.breakpoints[activeBreakpoint], propName)) {\n          return props.breakpoints[activeBreakpoint][propName];\n        }\n      }\n\n      return props[propName];\n    };\n\n    this.checkIfValueChanged = prevProps => {\n      const currentValue = this.getProp('infinite') ? this.props.value : this.clamp(this.props.value);\n      const prevValue = this.getProp('infinite') ? prevProps.value : this.clamp(prevProps.value);\n      return currentValue !== prevValue;\n    };\n\n    this.resetInterval = () => {\n      if (this.interval) {\n        clearInterval(this.interval);\n      }\n\n      const autoPlay = this.getProp('autoPlay');\n\n      if (!isNil(autoPlay)) {\n        this.interval = setInterval(() => {\n          if (!document.hidden && !this.state.isAutoPlayStopped) {\n            this.nextSlide();\n          }\n        }, autoPlay);\n      }\n    };\n\n    this.getChildren = () => {\n      if (!this.props.children) {\n        if (this.props.slides) {\n          return this.props.slides;\n        }\n\n        return [];\n      }\n\n      if (Array.isArray(this.props.children)) {\n        return this.props.children;\n      }\n\n      return [this.props.children];\n    };\n\n    this.getActiveSlideIndex = () => this.getProp('infinite') ? this.getCurrentSlideIndex() + this.getClonesLeft() * this.getChildren().length : this.getCurrentSlideIndex();\n\n    this.getTargetMod = (customValue = null) => {\n      const value = isNil(customValue) ? this.getCurrentValue() : customValue;\n      const length = this.getChildren().length;\n      let targetSlide;\n\n      if (value >= 0) {\n        targetSlide = value % length;\n      } else {\n        targetSlide = (length - Math.abs(value % length)) % length;\n      }\n\n      return targetSlide;\n    };\n\n    this.getTargetSlide = () => {\n      if (!isNil(this.state.infiniteTransitionFrom)) {\n        const mod = this.getTargetMod(this.state.infiniteTransitionFrom);\n        const value = this.getCurrentValue();\n        return mod + (value - this.state.infiniteTransitionFrom);\n      }\n\n      return this.getTargetMod();\n    };\n\n    this.renderArrowWithAddedHandler = (element, onClick, name, disable = false) => React.createElement(\"div\", {\n      className: classnames('Carousel__customArrows', {\n        'Carousel__arrow--disable': disable\n      }, `Carousel__custom-${name}`),\n      ref: el => this[`${name}Node`] = el,\n      onClick: this.getProp('addArrowClickHandler') ? onClick : null,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 185\n      },\n      __self: this\n    }, element);\n\n    this.renderArrowLeft = () => {\n      const value = this.getCurrentValue();\n      const disabled = value <= 0 && !this.getProp('infinite');\n\n      if (this.getProp('arrowLeft')) {\n        if (!disabled) {\n          return this.renderArrowWithAddedHandler(this.getProp('arrowLeft'), this.prevSlide, 'arrowLeft');\n        }\n\n        const arrow = this.getProp('arrowLeftDisabled') ? this.getProp('arrowLeftDisabled') : this.getProp('arrowLeft');\n        return this.renderArrowWithAddedHandler(arrow, this.prevSlide, 'arrowLeft', disabled);\n      }\n\n      if (this.getProp('arrows')) {\n        return React.createElement(\"button\", {\n          className: \"Carousel__arrows Carousel__arrowLeft\",\n          onClick: this.prevSlide,\n          ref: el => this.arrowLeftNode = el,\n          disabled: disabled,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 219\n          },\n          __self: this\n        }, React.createElement(\"span\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 225\n          },\n          __self: this\n        }, \"prev\"));\n      }\n\n      return null;\n    };\n\n    this.renderArrowRight = () => {\n      const slides = this.getChildren();\n      const value = this.getCurrentValue();\n      const lastSlideIndex = slides.length - 1;\n      const disabled = value === lastSlideIndex && !this.getProp('infinite');\n\n      if (this.getProp('arrowRight')) {\n        if (!disabled) {\n          return this.renderArrowWithAddedHandler(this.getProp('arrowRight'), this.nextSlide, 'arrowRight');\n        }\n\n        const arrow = this.getProp('arrowRightDisabled') ? this.getProp('arrowRightDisabled') : this.getProp('arrowRight');\n        return this.renderArrowWithAddedHandler(arrow, this.nextSlide, 'arrowRight', disabled);\n      }\n\n      if (this.getProp('arrows')) {\n        return React.createElement(\"button\", {\n          className: \"Carousel__arrows Carousel__arrowRight\",\n          onClick: this.nextSlide,\n          ref: el => this.arrowRightNode = el,\n          disabled: disabled,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 251\n          },\n          __self: this\n        }, React.createElement(\"span\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 257\n          },\n          __self: this\n        }, \"next\"));\n      }\n\n      return null;\n    };\n  }\n\n  onchange(value) {\n    this.setState({\n      value\n    });\n  }\n\n  render() {\n    return React.createElement(React.Fragment, null, React.createElement(\"div\", {\n      className: \"col-md-4\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 269\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"card-carousel\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 270\n      },\n      __self: this\n    }, React.createElement(Carousel, {\n      arrows: true,\n      infinite: true,\n      slides: this.state.slides,\n      value: this.state.value,\n      onChange: this.onchange,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 271\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      className: \"slide-count\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 272\n      },\n      __self: this\n    }, this.renderArrowLeft(), this.renderArrowRight(), React.createElement(CarouselDots, {\n      arrows: true,\n      value: this.state.value,\n      onChange: this.onchange,\n      number: this.state.slides.length,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 275\n      },\n      __self: this\n    }), \"/\", React.createElement(\"div\", {\n      className: \"total\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 276\n      },\n      __self: this\n    }, this.state.slides.length)))));\n  }\n\n}\n\nNumberCountCarousel.propTypes = {\n  className: PropTypes.string,\n  minDraggableOffset: PropTypes.number,\n  breakpoints: PropTypes.objectOf(PropTypes.shape({\n    arrows: PropTypes.bool,\n    arrowLeft: PropTypes.element,\n    arrowRight: PropTypes.element,\n    addArrowClickHandler: PropTypes.bool,\n    className: PropTypes.string\n  }))\n};\nexport default NumberCountCarousel;","map":{"version":3,"sources":["/home/mindbox/Documents/manoj/nexus/src/components/Carousel/Types/NumberCountCarousel.js"],"names":["React","Component","PropTypes","isNil","config","has","Card","Cardimg","Cardoverlay","Detail","Button","Cardheading","CardDT","Action","CardFooter","Icon","C10","heart","thumbsUp","messageSquare","Carousel","CarouselDots","classnames","NumberCountCarousel","clamp","value","maxValue","getChildren","length","changeSlide","props","onChange","getProp","nextSlide","getCurrentValue","prevSlide","infinite","getNeededAdditionalClones","Math","ceil","state","infiniteTransitionFrom","getAdditionalClonesLeft","additionalClones","getAdditionalClonesRight","getClonesLeft","numberOfInfiniteClones","getClonesRight","getAdditionalClonesOffset","getCarouselElementWidth","propName","customProps","activeBreakpoint","breakpoints","windowWidth","resolutions","Object","keys","forEach","resolutionString","resolution","parseInt","checkIfValueChanged","prevProps","currentValue","prevValue","resetInterval","interval","clearInterval","autoPlay","setInterval","document","hidden","isAutoPlayStopped","children","slides","Array","isArray","getActiveSlideIndex","getCurrentSlideIndex","getTargetMod","customValue","targetSlide","abs","getTargetSlide","mod","renderArrowWithAddedHandler","element","onClick","name","disable","el","renderArrowLeft","disabled","arrow","arrowLeftNode","renderArrowRight","lastSlideIndex","arrowRightNode","onchange","setState","render","propTypes","className","string","minDraggableOffset","number","objectOf","shape","arrows","bool","arrowLeft","arrowRight","addArrowClickHandler"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport isNil from 'lodash/isNil';\nimport config from '../Config';\nimport has from 'lodash/has';\nimport Card from '../../Magazines/Cardtags/card/card';\nimport Cardimg from '../../Magazines/Cardtags/cardimage/Cardimg';\nimport Cardoverlay from '../../Magazines/Cardtags/Cardoverlay/Cardoverlay';\nimport Detail from '../../Magazines/Cardtags/carddetail/carddetail';\nimport Button from '../../button/buttonprop/buttonprop';\nimport Cardheading from '../../Magazines/Cardtags/Carddescription/cardheading';\nimport CardDT from '../../Magazines/Cardtags/Carddescription/cardDT';\nimport Action from '../../Magazines/Cardtags/Cardaction/Cardaction';\nimport CardFooter from '../../Magazines/Cardtags/Cardfooter/Cardfooter';\nimport { Icon } from 'react-icons-kit'\nimport C10 from '../../../images/carousel/Card_Carousel.png';\nimport {heart} from 'react-icons-kit/feather/heart'\nimport { thumbsUp } from 'react-icons-kit/feather/thumbsUp';\nimport { messageSquare } from 'react-icons-kit/feather/messageSquare';\nimport Carousel from '../CarouselWrapper';\nimport CarouselDots from '../CarouselDots';\nimport classnames from 'classnames';\nimport '../Carousel.css'\n\nclass NumberCountCarousel extends Component {\n    static propTypes = {\n        className: PropTypes.string,\n        minDraggableOffset: PropTypes.number,\n        breakpoints: PropTypes.objectOf(PropTypes.shape({\n            arrows: PropTypes.bool,\n            arrowLeft: PropTypes.element,\n            arrowRight: PropTypes.element,\n            addArrowClickHandler: PropTypes.bool,\n            className: PropTypes.string,\n        })),\n    }\n    /* ========== control ========== */\n  /**\n   * Clamps number between 0 and last slide index.\n   * @param {number} value to be clamped\n   * @return {number} new value\n   */\n  clamp = value => {\n    const maxValue = this.getChildren().length - 1;\n    if (value > maxValue) {\n      return maxValue;\n    }\n    if (value < 0) {\n      return 0;\n    }\n    return value;\n  };\n\n    /**\n     * Clamps a provided value and triggers onChange\n     * @param {number} value desired index to change current value to\n     * @return {undefined}\n     */\n    changeSlide = value => this.props.onChange(this.getProp('infinite') ? value : this.clamp(value));\n\n    nextSlide = () => this.changeSlide(this.getCurrentValue() + this.getProp('slidesPerScroll'));\n\n    prevSlide = () => this.changeSlide(this.getCurrentValue() - this.getProp('slidesPerScroll'));\n\n    getCurrentValue = () => this.props.infinite ? this.props.value : this.clamp(this.props.value);\n\n    getNeededAdditionalClones = () =>\n      Math.ceil((this.getCurrentValue() - this.state.infiniteTransitionFrom) / this.getChildren().length);\n  \n    getAdditionalClonesLeft = () => {\n      const additionalClones = this.getNeededAdditionalClones();\n      return additionalClones < 0 ? -additionalClones : 0;\n    };\n    getAdditionalClonesRight = () => {\n      const additionalClones = this.getNeededAdditionalClones();\n      return additionalClones > 0 ? additionalClones : 0;\n    };\n    getClonesLeft = () => config.numberOfInfiniteClones + this.getAdditionalClonesLeft();\n    getClonesRight = () => config.numberOfInfiniteClones + this.getAdditionalClonesRight();\n  \n    getAdditionalClonesOffset = () =>\n      -this.getChildren().length * this.getCarouselElementWidth() * this.getAdditionalClonesLeft();\n  \n    /**\n     * Returns the value of a prop based on the current window width and breakpoints provided\n     * @param {string} propName name of the prop you want to get\n     * @param {object} customProps props object (used e.g. when you want to get prop from prevProps object instead of this.props)\n     * @return {any} props value\n     */\n    getProp = (propName, customProps = null) => {\n      const props = customProps || this.props;\n      let activeBreakpoint = null;\n      if (props.breakpoints) {\n        const windowWidth = this.state.windowWidth;\n        const resolutions = Object.keys(props.breakpoints);\n        resolutions.forEach(resolutionString => {\n          const resolution = parseInt(resolutionString);\n          if (windowWidth <= resolution) {\n            if (!activeBreakpoint || activeBreakpoint > resolution) {\n              activeBreakpoint = resolution;\n            }\n          }\n        });\n      }\n      if (activeBreakpoint) {\n        if (has(props.breakpoints[activeBreakpoint], propName)) {\n          return props.breakpoints[activeBreakpoint][propName];\n        }\n      }\n      return props[propName];\n    };\n  \n    /**\n     * Check if this.props.value changed after update\n     * @param {object} prevProps\n     * @return {boolean} result\n     */\n    checkIfValueChanged = prevProps => {\n      const currentValue = this.getProp('infinite') ? this.props.value : this.clamp(this.props.value);\n      const prevValue = this.getProp('infinite') ? prevProps.value : this.clamp(prevProps.value);\n      return currentValue !== prevValue;\n    };\n  \n    resetInterval = () => {\n      if (this.interval) {\n        clearInterval(this.interval);\n      }\n      const autoPlay = this.getProp('autoPlay');\n      if (!isNil(autoPlay)) {\n        this.interval = setInterval(() => {\n          if (!document.hidden && !this.state.isAutoPlayStopped) {\n            this.nextSlide();\n          }\n        }, autoPlay);\n      }\n    };\n  \n    getChildren = () => {\n      if (!this.props.children) {\n        if (this.props.slides) {\n          return this.props.slides;\n        }\n        return [];\n      }\n      if (Array.isArray(this.props.children)) {\n        return this.props.children;\n      }\n      return [this.props.children];\n    };\n  \n    getActiveSlideIndex = () => this.getProp('infinite')\n      ? this.getCurrentSlideIndex() + this.getClonesLeft() * this.getChildren().length\n      : this.getCurrentSlideIndex();\n  \n    getTargetMod = (customValue = null) => {\n      const value = isNil(customValue) ? this.getCurrentValue() : customValue;\n      const length = this.getChildren().length;\n      let targetSlide;\n      if (value >= 0) {\n        targetSlide = value % length;\n      } else {\n        targetSlide = (length - Math.abs(value % length)) % length;\n      }\n      return targetSlide;\n    };\n  \n    getTargetSlide = () => {\n      if (!isNil(this.state.infiniteTransitionFrom)) {\n        const mod = this.getTargetMod(this.state.infiniteTransitionFrom);\n        const value = this.getCurrentValue();\n  \n        return mod + (value - this.state.infiniteTransitionFrom);\n      }\n      return this.getTargetMod();\n    };\n    /**\n   * Adds onClick handler to the arrow if possible (if it does not already have one)\n   * @param {ReactElement} element to render\n   * @param {function} onClick handler to be added to element\n   * @param {string} name of an element\n   * @param {boolean} disable info whether the arrow is disabled\n   * @return {ReactElement} element with added handler\n   */\n  renderArrowWithAddedHandler = (element, onClick, name, disable = false) => (\n    <div\n      className={\n        classnames(\n          'Carousel__customArrows',\n          {\n            'Carousel__arrow--disable': disable,\n          },\n          `Carousel__custom-${name}`,\n        )\n      }\n      ref={el => this[`${name}Node`] = el}\n      onClick={this.getProp('addArrowClickHandler') ? onClick : null}\n    >\n      {element}\n    </div>\n  );\n\n  /**\n   * Renders arrow left\n   * @return {ReactElement} element\n   */\n  renderArrowLeft = () => {\n    const value = this.getCurrentValue();\n    const disabled = value <= 0 && !this.getProp('infinite');\n\n    if (this.getProp('arrowLeft')) {\n      if (!disabled) {\n        return this.renderArrowWithAddedHandler(this.getProp('arrowLeft'), this.prevSlide, 'arrowLeft');\n      }\n      const arrow = this.getProp('arrowLeftDisabled') ? this.getProp('arrowLeftDisabled') : this.getProp('arrowLeft');\n      return this.renderArrowWithAddedHandler(arrow, this.prevSlide, 'arrowLeft', disabled);\n    }\n    if (this.getProp('arrows')) {\n      return (\n        <button\n          className=\"Carousel__arrows Carousel__arrowLeft\"\n          onClick={this.prevSlide}\n          ref={el => this.arrowLeftNode = el}\n          disabled={disabled}\n        >\n          <span>prev</span>\n        </button>\n      );\n    }\n    return null;\n  };\n\n  /**\n   * Renders arrow right\n   * @return {ReactElement} element\n   */\n  renderArrowRight = () => {\n    const slides = this.getChildren();\n    const value = this.getCurrentValue();\n    const lastSlideIndex = slides.length - 1;\n    const disabled = value === lastSlideIndex && !this.getProp('infinite');\n\n    if (this.getProp('arrowRight')) {\n      if (!disabled) {\n        return this.renderArrowWithAddedHandler(this.getProp('arrowRight'), this.nextSlide, 'arrowRight');\n      }\n      const arrow = this.getProp('arrowRightDisabled') ? this.getProp('arrowRightDisabled') : this.getProp('arrowRight');\n      return this.renderArrowWithAddedHandler(arrow, this.nextSlide, 'arrowRight', disabled);\n    }\n    if (this.getProp('arrows')) {\n      return (\n        <button\n          className=\"Carousel__arrows Carousel__arrowRight\"\n          onClick={this.nextSlide}\n          ref={el => this.arrowRightNode = el}\n          disabled={disabled}\n        >\n          <span>next</span>\n        </button>\n      );\n    }\n    return null;\n  };\n    onchange(value) {\n        this.setState({ value });\n    }\n    render() {\n        return (\n            <>  \n                <div className=\"col-md-4\">\n                    <div className=\"card-carousel\">\n                        <Carousel arrows infinite slides={this.state.slides} value={this.state.value} onChange={this.onchange} />\n                        <div className=\"slide-count\">\n                            {this.renderArrowLeft()}\n                            {this.renderArrowRight()}\n                            <CarouselDots arrows value={this.state.value} onChange={this.onchange} number={this.state.slides.length} />/\n                            <div className=\"total\">{this.state.slides.length}</div>\n                        </div>\n                    </div>\n                </div>\n            </>\n        );\n    }\n}\n\nexport default NumberCountCarousel;"]},"metadata":{},"sourceType":"module"}