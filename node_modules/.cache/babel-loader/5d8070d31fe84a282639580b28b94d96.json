{"ast":null,"code":"var _jsxFileName = \"/home/mindbox/Documents/manoj/nexus/src/components/Sliders/Types/singleEditableSlider.js\";\nimport React, { Component } from 'react';\n\nclass singleEditableSlider extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      sliderWidth: 0,\n      offsetSliderWidht: 0,\n      minV: 0,\n      maxV: 100,\n      minValueBetween: 10,\n      value: this.props.value,\n      className: this.props.className\n    };\n\n    this.setMin = e => {\n      const {\n        minV,\n        maxV,\n        currentMax,\n        minValueBetween\n      } = this.state;\n      const inputMin = e.target.value;\n      this.setState({\n        inputMin\n      });\n\n      if (inputMin >= minV && inputMin <= currentMax - minValueBetween) {\n        this.setState({\n          currentMin: parseInt(inputMin)\n        });\n        this.minValue.style.width = inputMin * 100 / maxV + \"%\";\n      }\n    };\n\n    this.changeMinValue = e => {\n      e.preventDefault();\n      document.addEventListener('mousemove', this.onMouseMoveMin);\n      document.addEventListener('mouseup', this.onMouseUpMin);\n      document.addEventListener('touchmove', this.onMouseMoveMin);\n      document.addEventListener('touchend', this.onMouseUpMin);\n    };\n\n    this.onMouseMoveMin = e => {\n      const {\n        minV,\n        maxV,\n        currentMax,\n        minValueBetween,\n        sliderWidth,\n        offsetSliderWidht\n      } = this.state;\n      const dragedWidht = e.clientX - offsetSliderWidht;\n      const dragedWidhtInPercent = dragedWidht * 100 / sliderWidth;\n      const currentMin = Math.abs(parseInt(maxV * dragedWidhtInPercent / 100)); // console.log(e.pageX, e.clientX, offsetSliderWidht);\n      // console.log(currentMin , (currentMax-minValueBetween));\n      // console.log((max * dragedWidhtInPercent)/100);\n\n      if (currentMin >= minV && currentMin <= currentMax - minValueBetween) {\n        this.minValue.style.width = dragedWidhtInPercent + \"%\";\n        this.minValue.dataset.content = currentMin;\n        this.setState({\n          currentMin,\n          inputMin: currentMin\n        });\n      }\n    };\n\n    this.onMouseUpMin = () => {\n      document.removeEventListener('mouseup', this.onMouseUpMin);\n      document.removeEventListener('mousemove', this.onMouseMoveMin);\n      document.removeEventListener('touchend', this.onMouseMoveMin);\n      document.removeEventListener('touchmove', this.onMouseUpMin);\n    };\n\n    this.setMax = e => {\n      const {\n        minV,\n        maxV,\n        currentMin,\n        currentMax,\n        minValueBetween\n      } = this.state;\n      const inputMax = e.target.value;\n      this.setState({\n        inputMax\n      });\n\n      if (inputMax >= currentMin + minValueBetween && inputMax <= maxV) {\n        this.setState({\n          currentMax: parseInt(inputMax)\n        });\n        this.maxValue.style.width = inputMax * 100 / maxV + \"%\";\n      }\n    };\n\n    this.changeMaxValue = e => {\n      e.preventDefault();\n      document.addEventListener('mousemove', this.onMouseMoveMax);\n      document.addEventListener('mouseup', this.onMouseUpMax);\n      document.addEventListener('touchmove', this.onMouseMoveMax);\n      document.addEventListener('touchend', this.onMouseUpMax);\n    };\n\n    this.onMouseMoveMax = e => {\n      const {\n        maxV,\n        currentMin,\n        minValueBetween,\n        sliderWidth,\n        offsetSliderWidht\n      } = this.state;\n      const maxWalueThumb = this.maxValue;\n      const dragedWidht = e.clientX - offsetSliderWidht;\n      const dragedWidhtInPercent = dragedWidht * 100 / sliderWidth;\n      const currentMax = Math.abs(parseInt(maxV * dragedWidhtInPercent / 100));\n\n      if (currentMax >= currentMin + minValueBetween && currentMax <= maxV) {\n        maxWalueThumb.style.width = dragedWidhtInPercent + \"%\";\n        maxWalueThumb.dataset.content = currentMax;\n        this.setState({\n          currentMax,\n          inputMax: currentMax\n        });\n      }\n    };\n\n    this.onMouseUpMax = () => {\n      document.removeEventListener('mouseup', this.onMouseUp);\n      document.removeEventListener('mousemove', this.onMouseMoveMax);\n      document.removeEventListener('touchend', this.onMouseUp);\n      document.removeEventListener('touchmove', this.onMouseMoveMax);\n    };\n\n    this.maxForMin = () => {\n      const {\n        currentMax,\n        minValueBetween\n      } = this.state;\n      return currentMax - minValueBetween;\n    };\n\n    this.minForMax = () => {\n      const {\n        currentMin,\n        minValueBetween\n      } = this.state;\n      return currentMin + minValueBetween;\n    };\n  }\n\n  componentDidMount() {\n    const {\n      value\n    } = this.state;\n    this.minValue.style.width = currentMin * 100 / maxV + \"%\";\n    this.maxValue.style.width = currentMax * 100 / maxV + \"%\";\n    this.setState({\n      sliderWidth: this.slider.offsetWidth,\n      offsetSliderWidht: this.slider.offsetLeft\n    });\n  }\n\n  render() {\n    return React.createElement(React.Fragment, null, React.createElement(\"div\", {\n      ref: ref => this.slider = ref,\n      id: \"range-slider\",\n      className: `${this.state.className} double-range-slider`,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 155\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      ref: ref => this.minValue = ref,\n      id: \"min\",\n      \"data-content\": this.state.currentMin,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 156\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      ref: ref => this.minValueDrag = ref,\n      id: \"min-drag\",\n      onMouseDown: this.changeMinValue,\n      onTouchStart: this.changeMinValue,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 157\n      },\n      __self: this\n    })), React.createElement(\"div\", {\n      ref: ref => this.maxValue = ref,\n      id: \"max\",\n      \"data-content\": this.state.currentMax,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 160\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      ref: ref => this.maxValueDrag = ref,\n      id: \"max-drag\",\n      onMouseDown: this.changeMaxValue,\n      onTouchStart: this.changeMaxValue,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 161\n      },\n      __self: this\n    }))));\n  }\n\n}\n\nexport default singleEditableSlider;","map":{"version":3,"sources":["/home/mindbox/Documents/manoj/nexus/src/components/Sliders/Types/singleEditableSlider.js"],"names":["React","Component","singleEditableSlider","state","sliderWidth","offsetSliderWidht","minV","maxV","minValueBetween","value","props","className","setMin","e","currentMax","inputMin","target","setState","currentMin","parseInt","minValue","style","width","changeMinValue","preventDefault","document","addEventListener","onMouseMoveMin","onMouseUpMin","dragedWidht","clientX","dragedWidhtInPercent","Math","abs","dataset","content","removeEventListener","setMax","inputMax","maxValue","changeMaxValue","onMouseMoveMax","onMouseUpMax","maxWalueThumb","onMouseUp","maxForMin","minForMax","componentDidMount","slider","offsetWidth","offsetLeft","render","ref","minValueDrag","maxValueDrag"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\n\nclass singleEditableSlider extends Component {\n    state = {\n        sliderWidth: 0,\n        offsetSliderWidht: 0,\n        minV: 0,\n        maxV: 100,\n        minValueBetween: 10,\n        \n        value: this.props.value,\n\n        className: this.props.className,\n    };\n\n    componentDidMount() {\n        const { value } = this.state;\n        \n        this.minValue.style.width = (currentMin*100)/maxV + \"%\";\n        this.maxValue.style.width = (currentMax*100)/maxV + \"%\";\n        \n        this.setState({\n            sliderWidth: this.slider.offsetWidth,\n            offsetSliderWidht: this.slider.offsetLeft,\n        })\n    }\n\n    setMin = (e) => {\n        const { minV, maxV, currentMax, minValueBetween } = this.state;\n        const inputMin = e.target.value;\n        \n        this.setState({\n            inputMin\n        });\n        \n        if((inputMin >= minV) && (inputMin <= (currentMax-minValueBetween))){\n        this.setState({\n            currentMin: parseInt(inputMin)\n        }); \n\n        this.minValue.style.width = (inputMin*100)/maxV + \"%\";\n        }\n    }\n\n    changeMinValue = (e) => {\n        e.preventDefault();\n\n        document.addEventListener('mousemove', this.onMouseMoveMin);\n        document.addEventListener('mouseup', this.onMouseUpMin);\n        \n        document.addEventListener('touchmove', this.onMouseMoveMin);\n        document.addEventListener('touchend', this.onMouseUpMin);\n    }\n\n    onMouseMoveMin = (e) => {\n        const { minV, maxV, currentMax, minValueBetween, sliderWidth, offsetSliderWidht } = this.state;\n        \n        const dragedWidht = e.clientX - offsetSliderWidht;\n        const dragedWidhtInPercent = (dragedWidht*100)/sliderWidth;\n        const currentMin = Math.abs(parseInt((maxV * dragedWidhtInPercent)/100));\n        \n        // console.log(e.pageX, e.clientX, offsetSliderWidht);\n        \n        // console.log(currentMin , (currentMax-minValueBetween));\n        \n        // console.log((max * dragedWidhtInPercent)/100);\n    \n        if( (currentMin >= minV) && (currentMin <= (currentMax-minValueBetween))){\n            this.minValue.style.width = dragedWidhtInPercent + \"%\";\n            this.minValue.dataset.content = currentMin;\n\n            this.setState({\n                currentMin,\n                inputMin: currentMin\n            })\n        }\n    }\n\n    onMouseUpMin = () => {\n        document.removeEventListener('mouseup', this.onMouseUpMin);\n        document.removeEventListener('mousemove', this.onMouseMoveMin);\n        \n        document.removeEventListener('touchend', this.onMouseMoveMin);\n        document.removeEventListener('touchmove', this.onMouseUpMin);\n    }\n    \n    \n    setMax = (e) => {\n        const { minV, maxV, currentMin, currentMax, minValueBetween } = this.state;\n\n        const inputMax = e.target.value;\n        \n        this.setState({\n            inputMax\n        });\n\n        if((inputMax >= currentMin + minValueBetween) && (inputMax <= maxV)){\n        \n            this.setState({\n                currentMax: parseInt(inputMax)\n            });\n            this.maxValue.style.width = (inputMax*100)/maxV + \"%\";\n        }\n        \n    }\n    \n    changeMaxValue = (e) => {\n        e.preventDefault();\n\n        document.addEventListener('mousemove', this.onMouseMoveMax);\n        document.addEventListener('mouseup', this.onMouseUpMax);\n        \n        document.addEventListener('touchmove', this.onMouseMoveMax);\n        document.addEventListener('touchend', this.onMouseUpMax);\n    }\n\n    onMouseMoveMax = (e) => {\n        const { maxV, currentMin, minValueBetween, sliderWidth, offsetSliderWidht} = this.state; \n        const maxWalueThumb = this.maxValue;\n        const dragedWidht = e.clientX - offsetSliderWidht;\n        const dragedWidhtInPercent = (dragedWidht*100)/sliderWidth;\n        const currentMax = Math.abs(parseInt((maxV * dragedWidhtInPercent)/100));\n        \n        if( (currentMax >= (currentMin + minValueBetween)) && (currentMax <= maxV)){\n        \n            maxWalueThumb.style.width = dragedWidhtInPercent + \"%\";\n            maxWalueThumb.dataset.content = currentMax;\n            this.setState({\n                currentMax,\n                inputMax: currentMax\n            })\n        }\n    }\n\n    onMouseUpMax = () => {\n        document.removeEventListener('mouseup', this.onMouseUp);\n        document.removeEventListener('mousemove', this.onMouseMoveMax);\n        \n        document.removeEventListener('touchend', this.onMouseUp);\n        document.removeEventListener('touchmove', this.onMouseMoveMax);\n    }\n    \n    maxForMin = () => {\n        const { currentMax, minValueBetween} = this.state; \n        return currentMax - minValueBetween;\n    }\n    \n    minForMax = () => {\n        const { currentMin, minValueBetween} = this.state; \n        return currentMin + minValueBetween;\n    }\n    render() {\n        return (\n            <>\n                <div ref={ref => this.slider = ref} id=\"range-slider\" className={`${this.state.className} double-range-slider`}>\n                    <div ref={ref => this.minValue = ref} id=\"min\" data-content={this.state.currentMin}>\n                        <div ref={ref => this.minValueDrag = ref} id=\"min-drag\" onMouseDown ={this.changeMinValue} onTouchStart={this.changeMinValue}></div>\n                    </div>\n\n                    <div ref={ref => this.maxValue = ref} id=\"max\" data-content={this.state.currentMax}>\n                        <div ref={ref => this.maxValueDrag = ref} id=\"max-drag\" onMouseDown={this.changeMaxValue} onTouchStart={this.changeMaxValue}></div>\n                    </div>\n                </div> \n            </>\n        );\n    }\n}\n\nexport default singleEditableSlider;"]},"metadata":{},"sourceType":"module"}