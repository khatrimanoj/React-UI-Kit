{"ast":null,"code":"var _jsxFileName = \"/home/mindbox/Documents/manoj/nexus/src/components/Carousel/Types/NumberCountCarousel.js\";\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport isNil from 'lodash/isNil';\nimport config from './Config';\nimport has from 'lodash/has';\nimport Card from '../../Magazines/Cardtags/card/card';\nimport Cardimg from '../../Magazines/Cardtags/cardimage/Cardimg';\nimport Cardoverlay from '../../Magazines/Cardtags/Cardoverlay/Cardoverlay';\nimport Detail from '../../Magazines/Cardtags/carddetail/carddetail';\nimport Button from '../../button/buttonprop/buttonprop';\nimport Cardheading from '../../Magazines/Cardtags/Carddescription/cardheading';\nimport CardDT from '../../Magazines/Cardtags/Carddescription/cardDT';\nimport Action from '../../Magazines/Cardtags/Cardaction/Cardaction';\nimport CardFooter from '../../Magazines/Cardtags/Cardfooter/Cardfooter';\nimport { Icon } from 'react-icons-kit';\nimport C10 from '../../../images/carousel/Card_Carousel.png';\nimport { heart } from 'react-icons-kit/feather/heart';\nimport { thumbsUp } from 'react-icons-kit/feather/thumbsUp';\nimport { messageSquare } from 'react-icons-kit/feather/messageSquare';\nimport Carousel from '../CarouselWrapper';\nimport CarouselDots from '../CarouselDots';\nimport classnames from 'classnames';\nimport '../Carousel.css';\n\nclass NumberCountCarousel extends Component {\n  /**\n   * Returns the value of a prop based on the current window width and breakpoints provided\n   * @param {string} propName name of the prop you want to get\n   * @param {object} customProps props object (used e.g. when you want to get prop from prevProps object instead of this.props)\n   * @return {any} props value\n   */\n\n  /**\n   * Check if this.props.value changed after update\n   * @param {object} prevProps\n   * @return {boolean} result\n   */\n\n  /**\n  * Adds onClick handler to the arrow if possible (if it does not already have one)\n  * @param {ReactElement} element to render\n  * @param {function} onClick handler to be added to element\n  * @param {string} name of an element\n  * @param {boolean} disable info whether the arrow is disabled\n  * @return {ReactElement} element with added handler\n  */\n\n  /**\n   * Renders arrow left\n   * @return {ReactElement} element\n   */\n\n  /**\n   * Renders arrow right\n   * @return {ReactElement} element\n   */\n  constructor(_props) {\n    super(_props);\n\n    this.getCurrentValue = () => this.props.infinite ? this.props.value : this.clamp(this.props.value);\n\n    this.getNeededAdditionalClones = () => Math.ceil((this.getCurrentValue() - this.state.infiniteTransitionFrom) / this.getChildren().length);\n\n    this.getAdditionalClonesLeft = () => {\n      const additionalClones = this.getNeededAdditionalClones();\n      return additionalClones < 0 ? -additionalClones : 0;\n    };\n\n    this.getAdditionalClonesRight = () => {\n      const additionalClones = this.getNeededAdditionalClones();\n      return additionalClones > 0 ? additionalClones : 0;\n    };\n\n    this.getClonesLeft = () => config.numberOfInfiniteClones + this.getAdditionalClonesLeft();\n\n    this.getClonesRight = () => config.numberOfInfiniteClones + this.getAdditionalClonesRight();\n\n    this.getAdditionalClonesOffset = () => -this.getChildren().length * this.getCarouselElementWidth() * this.getAdditionalClonesLeft();\n\n    this.getProp = (propName, customProps = null) => {\n      const props = customProps || this.props;\n      let activeBreakpoint = null;\n\n      if (props.breakpoints) {\n        const windowWidth = this.state.windowWidth;\n        const resolutions = Object.keys(props.breakpoints);\n        resolutions.forEach(resolutionString => {\n          const resolution = parseInt(resolutionString);\n\n          if (windowWidth <= resolution) {\n            if (!activeBreakpoint || activeBreakpoint > resolution) {\n              activeBreakpoint = resolution;\n            }\n          }\n        });\n      }\n\n      if (activeBreakpoint) {\n        if (has(props.breakpoints[activeBreakpoint], propName)) {\n          return props.breakpoints[activeBreakpoint][propName];\n        }\n      }\n\n      return props[propName];\n    };\n\n    this.checkIfValueChanged = prevProps => {\n      const currentValue = this.getProp('infinite') ? this.props.value : this.clamp(this.props.value);\n      const prevValue = this.getProp('infinite') ? prevProps.value : this.clamp(prevProps.value);\n      return currentValue !== prevValue;\n    };\n\n    this.resetInterval = () => {\n      if (this.interval) {\n        clearInterval(this.interval);\n      }\n\n      const autoPlay = this.getProp('autoPlay');\n\n      if (!isNil(autoPlay)) {\n        this.interval = setInterval(() => {\n          if (!document.hidden && !this.state.isAutoPlayStopped) {\n            this.nextSlide();\n          }\n        }, autoPlay);\n      }\n    };\n\n    this.getChildren = () => {\n      if (!this.props.children) {\n        if (this.props.slides) {\n          return this.props.slides;\n        }\n\n        return [];\n      }\n\n      if (Array.isArray(this.props.children)) {\n        return this.props.children;\n      }\n\n      return [this.props.children];\n    };\n\n    this.getActiveSlideIndex = () => this.getProp('infinite') ? this.getCurrentSlideIndex() + this.getClonesLeft() * this.getChildren().length : this.getCurrentSlideIndex();\n\n    this.getTargetMod = (customValue = null) => {\n      const value = isNil(customValue) ? this.getCurrentValue() : customValue;\n      const length = this.getChildren().length;\n      let targetSlide;\n\n      if (value >= 0) {\n        targetSlide = value % length;\n      } else {\n        targetSlide = (length - Math.abs(value % length)) % length;\n      }\n\n      return targetSlide;\n    };\n\n    this.getTargetSlide = () => {\n      if (!isNil(this.state.infiniteTransitionFrom)) {\n        const mod = this.getTargetMod(this.state.infiniteTransitionFrom);\n        const value = this.getCurrentValue();\n        return mod + (value - this.state.infiniteTransitionFrom);\n      }\n\n      return this.getTargetMod();\n    };\n\n    this.renderArrowWithAddedHandler = (element, onClick, name, disable = false) => React.createElement(\"div\", {\n      className: classnames('Carousel__customArrows', {\n        'Carousel__arrow--disable': disable\n      }, `Carousel__custom-${name}`),\n      ref: el => this[`${name}Node`] = el,\n      onClick: this.getProp('addArrowClickHandler') ? onClick : null,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 157\n      },\n      __self: this\n    }, element);\n\n    this.renderArrowLeft = () => {\n      const value = this.getCurrentValue();\n      const disabled = value <= 0 && !this.getProp('infinite');\n\n      if (this.getProp('arrowLeft')) {\n        if (!disabled) {\n          return this.renderArrowWithAddedHandler(this.getProp('arrowLeft'), this.prevSlide, 'arrowLeft');\n        }\n\n        const arrow = this.getProp('arrowLeftDisabled') ? this.getProp('arrowLeftDisabled') : this.getProp('arrowLeft');\n        return this.renderArrowWithAddedHandler(arrow, this.prevSlide, 'arrowLeft', disabled);\n      }\n\n      if (this.getProp('arrows')) {\n        return React.createElement(\"button\", {\n          className: \"Carousel__arrows Carousel__arrowLeft\",\n          onClick: this.prevSlide,\n          ref: el => this.arrowLeftNode = el,\n          disabled: disabled,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 191\n          },\n          __self: this\n        }, React.createElement(\"span\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 197\n          },\n          __self: this\n        }, \"prev\"));\n      }\n\n      return null;\n    };\n\n    this.renderArrowRight = () => {\n      const slides = this.getChildren();\n      const value = this.getCurrentValue();\n      const lastSlideIndex = slides.length - 1;\n      const disabled = value === lastSlideIndex && !this.getProp('infinite');\n\n      if (this.getProp('arrowRight')) {\n        if (!disabled) {\n          return this.renderArrowWithAddedHandler(this.getProp('arrowRight'), this.nextSlide, 'arrowRight');\n        }\n\n        const arrow = this.getProp('arrowRightDisabled') ? this.getProp('arrowRightDisabled') : this.getProp('arrowRight');\n        return this.renderArrowWithAddedHandler(arrow, this.nextSlide, 'arrowRight', disabled);\n      }\n\n      if (this.getProp('arrows')) {\n        return React.createElement(\"button\", {\n          className: \"Carousel__arrows Carousel__arrowRight\",\n          onClick: this.nextSlide,\n          ref: el => this.arrowRightNode = el,\n          disabled: disabled,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 223\n          },\n          __self: this\n        }, React.createElement(\"span\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 229\n          },\n          __self: this\n        }, \"next\"));\n      }\n\n      return null;\n    };\n\n    this.state = {\n      value: 0,\n      slides: [React.createElement(Card, {\n        style: \"z1 text-center text-white img-card \",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 240\n        },\n        __self: this\n      }, React.createElement(Cardimg, {\n        img: C10,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 241\n        },\n        __self: this\n      }), React.createElement(Cardoverlay, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 242\n        },\n        __self: this\n      }, React.createElement(Detail, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 243\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"card-flex mt-5\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 244\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"flex\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 245\n        },\n        __self: this\n      }), React.createElement(\"div\", {\n        className: \"flex\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 246\n        },\n        __self: this\n      }, React.createElement(Button, {\n        size: \"\",\n        style: \"btn-white text\",\n        Centericon: true,\n        icon: React.createElement(Icon, {\n          icon: heart,\n          size: 18,\n          style: {\n            backgroundColor: '#018aae',\n            padding: '11px',\n            borderRadius: '20px'\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 251\n          },\n          __self: this\n        }),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 247\n        },\n        __self: this\n      })))))), React.createElement(Card, {\n        style: \"z1 text-center text-white img-card \",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 258\n        },\n        __self: this\n      }, React.createElement(Cardimg, {\n        img: C10,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 259\n        },\n        __self: this\n      }), React.createElement(Cardoverlay, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 260\n        },\n        __self: this\n      }, React.createElement(Detail, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 261\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"card-flex mt-5\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 262\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"flex\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 263\n        },\n        __self: this\n      }), React.createElement(\"div\", {\n        className: \"flex\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 264\n        },\n        __self: this\n      }, React.createElement(Button, {\n        size: \"\",\n        style: \"btn-white text\",\n        Centericon: true,\n        icon: React.createElement(Icon, {\n          icon: heart,\n          size: 18,\n          style: {\n            backgroundColor: '#018aae',\n            padding: '11px',\n            borderRadius: '20px'\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 269\n          },\n          __self: this\n        }),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 265\n        },\n        __self: this\n      })))))), React.createElement(Card, {\n        style: \"z1 text-center text-white img-card \",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 276\n        },\n        __self: this\n      }, React.createElement(Cardimg, {\n        img: C10,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 277\n        },\n        __self: this\n      }), React.createElement(Cardoverlay, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 278\n        },\n        __self: this\n      }, React.createElement(Detail, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 279\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"card-flex mt-5\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 280\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"flex\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 281\n        },\n        __self: this\n      }), React.createElement(\"div\", {\n        className: \"flex\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 282\n        },\n        __self: this\n      }, React.createElement(Button, {\n        size: \"\",\n        style: \"btn-white text\",\n        Centericon: true,\n        icon: React.createElement(Icon, {\n          icon: heart,\n          size: 18,\n          style: {\n            backgroundColor: '#018aae',\n            padding: '11px',\n            borderRadius: '20px'\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 287\n          },\n          __self: this\n        }),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 283\n        },\n        __self: this\n      }))))))]\n    };\n    this.onchange = this.onchange.bind(this);\n  }\n\n  onchange(value) {\n    this.setState({\n      value\n    });\n  }\n\n  render() {\n    return React.createElement(React.Fragment, null, React.createElement(\"div\", {\n      className: \"col-md-4\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 304\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"card-carousel\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 305\n      },\n      __self: this\n    }, React.createElement(Carousel, {\n      infinite: true,\n      slides: this.state.slides,\n      value: this.state.value,\n      onChange: this.onchange,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 306\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      className: \"slide-count\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 307\n      },\n      __self: this\n    }, this.renderArrowLeft(), this.renderArrowRight(), React.createElement(CarouselDots, {\n      value: this.state.value,\n      onChange: this.onchange,\n      number: this.state.slides.length,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 310\n      },\n      __self: this\n    }), \"/\", React.createElement(\"div\", {\n      className: \"total\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 311\n      },\n      __self: this\n    }, this.state.slides.length)))));\n  }\n\n}\n\nNumberCountCarousel.propTypes = {\n  className: PropTypes.string,\n  minDraggableOffset: PropTypes.number,\n  breakpoints: PropTypes.objectOf(PropTypes.shape({\n    arrows: PropTypes.bool,\n    arrowLeft: PropTypes.element,\n    arrowRight: PropTypes.element,\n    addArrowClickHandler: PropTypes.bool,\n    className: PropTypes.string\n  }))\n};\nexport default NumberCountCarousel;","map":{"version":3,"sources":["/home/mindbox/Documents/manoj/nexus/src/components/Carousel/Types/NumberCountCarousel.js"],"names":["React","Component","PropTypes","isNil","config","has","Card","Cardimg","Cardoverlay","Detail","Button","Cardheading","CardDT","Action","CardFooter","Icon","C10","heart","thumbsUp","messageSquare","Carousel","CarouselDots","classnames","NumberCountCarousel","constructor","props","getCurrentValue","infinite","value","clamp","getNeededAdditionalClones","Math","ceil","state","infiniteTransitionFrom","getChildren","length","getAdditionalClonesLeft","additionalClones","getAdditionalClonesRight","getClonesLeft","numberOfInfiniteClones","getClonesRight","getAdditionalClonesOffset","getCarouselElementWidth","getProp","propName","customProps","activeBreakpoint","breakpoints","windowWidth","resolutions","Object","keys","forEach","resolutionString","resolution","parseInt","checkIfValueChanged","prevProps","currentValue","prevValue","resetInterval","interval","clearInterval","autoPlay","setInterval","document","hidden","isAutoPlayStopped","nextSlide","children","slides","Array","isArray","getActiveSlideIndex","getCurrentSlideIndex","getTargetMod","customValue","targetSlide","abs","getTargetSlide","mod","renderArrowWithAddedHandler","element","onClick","name","disable","el","renderArrowLeft","disabled","prevSlide","arrow","arrowLeftNode","renderArrowRight","lastSlideIndex","arrowRightNode","backgroundColor","padding","borderRadius","onchange","bind","setState","render","propTypes","className","string","minDraggableOffset","number","objectOf","shape","arrows","bool","arrowLeft","arrowRight","addArrowClickHandler"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport isNil from 'lodash/isNil';\nimport config from './Config';\nimport has from 'lodash/has';\nimport Card from '../../Magazines/Cardtags/card/card';\nimport Cardimg from '../../Magazines/Cardtags/cardimage/Cardimg';\nimport Cardoverlay from '../../Magazines/Cardtags/Cardoverlay/Cardoverlay';\nimport Detail from '../../Magazines/Cardtags/carddetail/carddetail';\nimport Button from '../../button/buttonprop/buttonprop';\nimport Cardheading from '../../Magazines/Cardtags/Carddescription/cardheading';\nimport CardDT from '../../Magazines/Cardtags/Carddescription/cardDT';\nimport Action from '../../Magazines/Cardtags/Cardaction/Cardaction';\nimport CardFooter from '../../Magazines/Cardtags/Cardfooter/Cardfooter';\nimport { Icon } from 'react-icons-kit'\nimport C10 from '../../../images/carousel/Card_Carousel.png';\nimport {heart} from 'react-icons-kit/feather/heart'\nimport { thumbsUp } from 'react-icons-kit/feather/thumbsUp';\nimport { messageSquare } from 'react-icons-kit/feather/messageSquare';\nimport Carousel from '../CarouselWrapper';\nimport CarouselDots from '../CarouselDots';\nimport classnames from 'classnames';\nimport '../Carousel.css'\n\nclass NumberCountCarousel extends Component {\n    static propTypes = {\n        className: PropTypes.string,\n        minDraggableOffset: PropTypes.number,\n        breakpoints: PropTypes.objectOf(PropTypes.shape({\n            arrows: PropTypes.bool,\n            arrowLeft: PropTypes.element,\n            arrowRight: PropTypes.element,\n            addArrowClickHandler: PropTypes.bool,\n            className: PropTypes.string,\n        })),\n    }\n    getCurrentValue = () => this.props.infinite ? this.props.value : this.clamp(this.props.value);\n\n    getNeededAdditionalClones = () =>\n      Math.ceil((this.getCurrentValue() - this.state.infiniteTransitionFrom) / this.getChildren().length);\n  \n    getAdditionalClonesLeft = () => {\n      const additionalClones = this.getNeededAdditionalClones();\n      return additionalClones < 0 ? -additionalClones : 0;\n    };\n    getAdditionalClonesRight = () => {\n      const additionalClones = this.getNeededAdditionalClones();\n      return additionalClones > 0 ? additionalClones : 0;\n    };\n    getClonesLeft = () => config.numberOfInfiniteClones + this.getAdditionalClonesLeft();\n    getClonesRight = () => config.numberOfInfiniteClones + this.getAdditionalClonesRight();\n  \n    getAdditionalClonesOffset = () =>\n      -this.getChildren().length * this.getCarouselElementWidth() * this.getAdditionalClonesLeft();\n  \n    /**\n     * Returns the value of a prop based on the current window width and breakpoints provided\n     * @param {string} propName name of the prop you want to get\n     * @param {object} customProps props object (used e.g. when you want to get prop from prevProps object instead of this.props)\n     * @return {any} props value\n     */\n    getProp = (propName, customProps = null) => {\n      const props = customProps || this.props;\n      let activeBreakpoint = null;\n      if (props.breakpoints) {\n        const windowWidth = this.state.windowWidth;\n        const resolutions = Object.keys(props.breakpoints);\n        resolutions.forEach(resolutionString => {\n          const resolution = parseInt(resolutionString);\n          if (windowWidth <= resolution) {\n            if (!activeBreakpoint || activeBreakpoint > resolution) {\n              activeBreakpoint = resolution;\n            }\n          }\n        });\n      }\n      if (activeBreakpoint) {\n        if (has(props.breakpoints[activeBreakpoint], propName)) {\n          return props.breakpoints[activeBreakpoint][propName];\n        }\n      }\n      return props[propName];\n    };\n  \n    /**\n     * Check if this.props.value changed after update\n     * @param {object} prevProps\n     * @return {boolean} result\n     */\n    checkIfValueChanged = prevProps => {\n      const currentValue = this.getProp('infinite') ? this.props.value : this.clamp(this.props.value);\n      const prevValue = this.getProp('infinite') ? prevProps.value : this.clamp(prevProps.value);\n      return currentValue !== prevValue;\n    };\n  \n    resetInterval = () => {\n      if (this.interval) {\n        clearInterval(this.interval);\n      }\n      const autoPlay = this.getProp('autoPlay');\n      if (!isNil(autoPlay)) {\n        this.interval = setInterval(() => {\n          if (!document.hidden && !this.state.isAutoPlayStopped) {\n            this.nextSlide();\n          }\n        }, autoPlay);\n      }\n    };\n  \n    getChildren = () => {\n      if (!this.props.children) {\n        if (this.props.slides) {\n          return this.props.slides;\n        }\n        return [];\n      }\n      if (Array.isArray(this.props.children)) {\n        return this.props.children;\n      }\n      return [this.props.children];\n    };\n  \n    getActiveSlideIndex = () => this.getProp('infinite')\n      ? this.getCurrentSlideIndex() + this.getClonesLeft() * this.getChildren().length\n      : this.getCurrentSlideIndex();\n  \n    getTargetMod = (customValue = null) => {\n      const value = isNil(customValue) ? this.getCurrentValue() : customValue;\n      const length = this.getChildren().length;\n      let targetSlide;\n      if (value >= 0) {\n        targetSlide = value % length;\n      } else {\n        targetSlide = (length - Math.abs(value % length)) % length;\n      }\n      return targetSlide;\n    };\n  \n    getTargetSlide = () => {\n      if (!isNil(this.state.infiniteTransitionFrom)) {\n        const mod = this.getTargetMod(this.state.infiniteTransitionFrom);\n        const value = this.getCurrentValue();\n  \n        return mod + (value - this.state.infiniteTransitionFrom);\n      }\n      return this.getTargetMod();\n    };\n    /**\n   * Adds onClick handler to the arrow if possible (if it does not already have one)\n   * @param {ReactElement} element to render\n   * @param {function} onClick handler to be added to element\n   * @param {string} name of an element\n   * @param {boolean} disable info whether the arrow is disabled\n   * @return {ReactElement} element with added handler\n   */\n  renderArrowWithAddedHandler = (element, onClick, name, disable = false) => (\n    <div\n      className={\n        classnames(\n          'Carousel__customArrows',\n          {\n            'Carousel__arrow--disable': disable,\n          },\n          `Carousel__custom-${name}`,\n        )\n      }\n      ref={el => this[`${name}Node`] = el}\n      onClick={this.getProp('addArrowClickHandler') ? onClick : null}\n    >\n      {element}\n    </div>\n  );\n\n  /**\n   * Renders arrow left\n   * @return {ReactElement} element\n   */\n  renderArrowLeft = () => {\n    const value = this.getCurrentValue();\n    const disabled = value <= 0 && !this.getProp('infinite');\n\n    if (this.getProp('arrowLeft')) {\n      if (!disabled) {\n        return this.renderArrowWithAddedHandler(this.getProp('arrowLeft'), this.prevSlide, 'arrowLeft');\n      }\n      const arrow = this.getProp('arrowLeftDisabled') ? this.getProp('arrowLeftDisabled') : this.getProp('arrowLeft');\n      return this.renderArrowWithAddedHandler(arrow, this.prevSlide, 'arrowLeft', disabled);\n    }\n    if (this.getProp('arrows')) {\n      return (\n        <button\n          className=\"Carousel__arrows Carousel__arrowLeft\"\n          onClick={this.prevSlide}\n          ref={el => this.arrowLeftNode = el}\n          disabled={disabled}\n        >\n          <span>prev</span>\n        </button>\n      );\n    }\n    return null;\n  };\n\n  /**\n   * Renders arrow right\n   * @return {ReactElement} element\n   */\n  renderArrowRight = () => {\n    const slides = this.getChildren();\n    const value = this.getCurrentValue();\n    const lastSlideIndex = slides.length - 1;\n    const disabled = value === lastSlideIndex && !this.getProp('infinite');\n\n    if (this.getProp('arrowRight')) {\n      if (!disabled) {\n        return this.renderArrowWithAddedHandler(this.getProp('arrowRight'), this.nextSlide, 'arrowRight');\n      }\n      const arrow = this.getProp('arrowRightDisabled') ? this.getProp('arrowRightDisabled') : this.getProp('arrowRight');\n      return this.renderArrowWithAddedHandler(arrow, this.nextSlide, 'arrowRight', disabled);\n    }\n    if (this.getProp('arrows')) {\n      return (\n        <button\n          className=\"Carousel__arrows Carousel__arrowRight\"\n          onClick={this.nextSlide}\n          ref={el => this.arrowRightNode = el}\n          disabled={disabled}\n        >\n          <span>next</span>\n        </button>\n      );\n    }\n    return null;\n  };\n    constructor (props) {\n        super(props)\n        this.state = {\n            value: 0,\n            slides: [\n            (<Card style=\"z1 text-center text-white img-card \">\n                <Cardimg img={C10}></Cardimg>\n                <Cardoverlay >\n                    <Detail>\n                        <div className=\"card-flex mt-5\">\n                            <div className=\"flex\"></div>\n                            <div className=\"flex\">\n                                <Button\n                                    size=\"\"\n                                    style=\"btn-white text\"\n                                    Centericon={true}\n                                    icon={<Icon icon={heart} size={18} style={{backgroundColor: '#018aae',padding: '11px', borderRadius: '20px'}}/>}\n                                />\n                            </div>\n                        </div>\n                    </Detail>\n                </Cardoverlay>\n            </Card>),\n            (<Card style=\"z1 text-center text-white img-card \">\n                <Cardimg img={C10}></Cardimg>\n                <Cardoverlay >\n                    <Detail>\n                        <div className=\"card-flex mt-5\">\n                            <div className=\"flex\"></div>\n                            <div className=\"flex\">\n                                <Button\n                                    size=\"\"\n                                    style=\"btn-white text\"\n                                    Centericon={true}\n                                    icon={<Icon icon={heart} size={18} style={{backgroundColor: '#018aae',padding: '11px', borderRadius: '20px'}}/>}\n                                />\n                            </div>\n                        </div>\n                    </Detail>\n                </Cardoverlay>\n            </Card>),\n            (<Card style=\"z1 text-center text-white img-card \">\n                <Cardimg img={C10}></Cardimg>\n                <Cardoverlay >\n                    <Detail>\n                        <div className=\"card-flex mt-5\">\n                            <div className=\"flex\"></div>\n                            <div className=\"flex\">\n                                <Button\n                                    size=\"\"\n                                    style=\"btn-white text\"\n                                    Centericon={true}\n                                    icon={<Icon icon={heart} size={18} style={{backgroundColor: '#018aae',padding: '11px', borderRadius: '20px'}}/>}\n                                />\n                            </div>\n                        </div>\n                    </Detail>\n                </Cardoverlay>\n            </Card>),\n            ],\n        }\n        this.onchange = this.onchange.bind(this);\n    }\n    onchange(value) {\n        this.setState({ value });\n    }\n    render() {\n        return (\n            <>  \n                <div className=\"col-md-4\">\n                    <div className=\"card-carousel\">\n                        <Carousel infinite slides={this.state.slides} value={this.state.value} onChange={this.onchange} />\n                        <div className=\"slide-count\">\n                            {this.renderArrowLeft()}\n                            {this.renderArrowRight()}\n                            <CarouselDots value={this.state.value} onChange={this.onchange} number={this.state.slides.length} />/\n                            <div className=\"total\">{this.state.slides.length}</div>\n                        </div>\n                    </div>\n                </div>\n            </>\n        );\n    }\n}\n\nexport default NumberCountCarousel;"]},"metadata":{},"sourceType":"module"}