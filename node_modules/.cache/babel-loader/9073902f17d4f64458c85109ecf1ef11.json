{"ast":null,"code":"var _jsxFileName = \"/home/mindbox/Documents/manoj/nexus/src/components/Dropdown/dropdownmenu/dropdownmenu.js\";\nimport React, { Component } from 'react';\nimport ReactDOM from 'react-dom';\nimport PropTypes from 'prop-types';\n\nclass dropdownsearch extends Component {\n  constructor(props) {\n    super(props);\n\n    this.checkType = value => {\n      this.setState({\n        typeDropdown: value\n      });\n    };\n\n    this.showDropdown = () => {\n      this.setState({\n        isOpen: true\n      });\n      document.addEventListener(\"click\", this.hideDropdown);\n      this.inputRef.current.focus();\n    };\n\n    this.hideDropdown = () => {\n      this.setState({\n        isOpen: false\n      });\n      document.removeEventListener(\"click\", this.hideDropdown);\n    };\n\n    this.chooseItem = value => {\n      if (this.state.labelItem !== value) {\n        this.setState({\n          labelItem: value\n        });\n      }\n    };\n\n    this.renderDataDropDown = (item, index) => {\n      const {\n        value,\n        label\n      } = this.state.typeDropdown ? {\n        value: index,\n        label: item\n      } : item;\n      return /*#__PURE__*/React.createElement(\"li\", {\n        key: index,\n        value: value,\n        onClick: () => this.chooseItem(label),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 85,\n          columnNumber: 11\n        }\n      }, /*#__PURE__*/React.createElement(\"a\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 90,\n          columnNumber: 13\n        }\n      }, label));\n    };\n\n    this.handleChange = e => {\n      this.setState({\n        searchString: e.target.value\n      });\n    };\n\n    this.state = {\n      isOpen: false,\n      labelItem: null,\n      typeDropdown: null,\n      searchString: '',\n      data: ''\n    };\n    this.inputRef = React.createRef();\n    this.showDropdown = this.showDropdown.bind(this);\n    this.handleChange = this.handleChange.bind(this);\n    this.clearInput = this.clearInput.bind(this);\n  }\n\n  list(data) {\n    const children = items => {\n      if (items) {\n        return /*#__PURE__*/React.createElement(\"ul\", {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 33,\n            columnNumber: 20\n          }\n        }, this.list(items));\n      }\n    };\n  }\n\n  componentWillMount() {\n    const {\n      label\n    } = this.props.list[0];\n    let firstItem = null;\n\n    if (typeof label != 'undefined') {\n      this.checkType(false);\n      firstItem = label;\n    } else {\n      this.checkType(true);\n      firstItem = this.props.list[0];\n    }\n\n    this.setState({\n      labelItem: firstItem\n    });\n  }\n\n  componentDidUpdate() {\n    this.inputRef.current.focus();\n  }\n\n  clearInput() {\n    this.setState({\n      searchString: ''\n    });\n    ReactDOM.findDOMNode(this.refs.inputRef).focus();\n  }\n\n  render() {\n    const {\n      list,\n      size,\n      border\n    } = this.props;\n    const dropdownClassname = `\n        dropdown\n        ${size === 'lg' && 'lg-dropdown'}\n        `;\n    const dropdowntoggleclass = `\n        dropdown-toggle\n        ${border === 'false' && 'bordernone'}\n        `;\n    /* searching code start here*/\n\n    var libraries = list,\n        searchString = this.state.searchString.trim().toLowerCase();\n\n    if (searchString.length > 0) {\n      libraries = libraries.filter(function (i) {\n        return i.label.toLowerCase().match(searchString);\n      });\n    }\n\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: ` ${dropdownClassname} ${this.state.isOpen ? 'open' : ''}`,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 117,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"button\", {\n      className: dropdowntoggleclass,\n      type: \"button\",\n      onClick: this.showDropdown,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 118,\n        columnNumber: 13\n      }\n    }, this.state.labelItem), /*#__PURE__*/React.createElement(\"ul\", {\n      className: \"dropdown-menu\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 123,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"li\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 124,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"dropdownsearch\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 125,\n        columnNumber: 19\n      }\n    }, /*#__PURE__*/React.createElement(\"input\", {\n      type: \"text\",\n      value: this.state.searchString,\n      ref: this.inputRef,\n      onChange: this.handleChange,\n      placeholder: \"Type here...\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 126,\n        columnNumber: 22\n      }\n    }), /*#__PURE__*/React.createElement(\"button\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 127,\n        columnNumber: 22\n      }\n    }))), libraries.map(this.renderDataDropDown)));\n  }\n\n}\n\ndropdownsearch.propTypes = {\n  list: PropTypes.array.isRequired\n};\ndropdownsearch.defaultProps = {\n  list: []\n};\nexport default dropdownsearch;","map":{"version":3,"sources":["/home/mindbox/Documents/manoj/nexus/src/components/Dropdown/dropdownmenu/dropdownmenu.js"],"names":["React","Component","ReactDOM","PropTypes","dropdownsearch","constructor","props","checkType","value","setState","typeDropdown","showDropdown","isOpen","document","addEventListener","hideDropdown","inputRef","current","focus","removeEventListener","chooseItem","state","labelItem","renderDataDropDown","item","index","label","handleChange","e","searchString","target","data","createRef","bind","clearInput","list","children","items","componentWillMount","firstItem","componentDidUpdate","findDOMNode","refs","render","size","border","dropdownClassname","dropdowntoggleclass","libraries","trim","toLowerCase","length","filter","i","match","map","propTypes","array","isRequired","defaultProps"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,QAAP,MAAqB,WAArB;AACA,OAAOC,SAAP,MAAsB,YAAtB;;AAEA,MAAMC,cAAN,SAA6BH,SAA7B,CAAuC;AAQjCI,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACjB,UAAMA,KAAN;;AADiB,SA2CnBC,SA3CmB,GA2CNC,KAAD,IAAW;AACrB,WAAKC,QAAL,CAAc;AACVC,QAAAA,YAAY,EAAEF;AADJ,OAAd;AAGD,KA/CkB;;AAAA,SAgDnBG,YAhDmB,GAgDJ,MAAM;AACnB,WAAKF,QAAL,CAAc;AAAEG,QAAAA,MAAM,EAAE;AAAV,OAAd;AACAC,MAAAA,QAAQ,CAACC,gBAAT,CAA0B,OAA1B,EAAmC,KAAKC,YAAxC;AACA,WAAKC,QAAL,CAAcC,OAAd,CAAsBC,KAAtB;AACD,KApDkB;;AAAA,SAqDnBH,YArDmB,GAqDJ,MAAM;AACnB,WAAKN,QAAL,CAAc;AAAEG,QAAAA,MAAM,EAAE;AAAV,OAAd;AACAC,MAAAA,QAAQ,CAACM,mBAAT,CAA6B,OAA7B,EAAsC,KAAKJ,YAA3C;AACD,KAxDkB;;AAAA,SAyDnBK,UAzDmB,GAyDLZ,KAAD,IAAW;AACtB,UAAI,KAAKa,KAAL,CAAWC,SAAX,KAAyBd,KAA7B,EAAoC;AAClC,aAAKC,QAAL,CAAc;AACZa,UAAAA,SAAS,EAAEd;AADC,SAAd;AAGD;AACF,KA/DkB;;AAAA,SAqEnBe,kBArEmB,GAqEE,CAACC,IAAD,EAAOC,KAAP,KAAiB;AACpC,YAAM;AAACjB,QAAAA,KAAD;AAAQkB,QAAAA;AAAR,UAAiB,KAAKL,KAAL,CAAWX,YAAX,GAA0B;AAACF,QAAAA,KAAK,EAAEiB,KAAR;AAAeC,QAAAA,KAAK,EAAEF;AAAtB,OAA1B,GAAwDA,IAA/E;AACA,0BACE;AACE,QAAA,GAAG,EAAEC,KADP;AAEE,QAAA,KAAK,EAAEjB,KAFT;AAGE,QAAA,OAAO,EAAE,MAAM,KAAKY,UAAL,CAAgBM,KAAhB,CAHjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBAKE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAIA,KAAJ,CALF,CADF;AASD,KAhFkB;;AAAA,SAkFtBC,YAlFsB,GAkFNC,CAAD,IAAO;AACpB,WAAKnB,QAAL,CAAc;AAAEoB,QAAAA,YAAY,EAACD,CAAC,CAACE,MAAF,CAAStB;AAAxB,OAAd;AACD,KApFqB;;AAEjB,SAAKa,KAAL,GAAa;AACXT,MAAAA,MAAM,EAAE,KADG;AAEXU,MAAAA,SAAS,EAAE,IAFA;AAGXZ,MAAAA,YAAY,EAAE,IAHH;AAIXmB,MAAAA,YAAY,EAAE,EAJH;AAKXE,MAAAA,IAAI,EAAE;AALK,KAAb;AAQA,SAAKf,QAAL,GAAgBhB,KAAK,CAACgC,SAAN,EAAhB;AACA,SAAKrB,YAAL,GAAoB,KAAKA,YAAL,CAAkBsB,IAAlB,CAAuB,IAAvB,CAApB;AACA,SAAKN,YAAL,GAAoB,KAAKA,YAAL,CAAkBM,IAAlB,CAAuB,IAAvB,CAApB;AACA,SAAKC,UAAL,GAAkB,KAAKA,UAAL,CAAgBD,IAAhB,CAAqB,IAArB,CAAlB;AAGD;;AACDE,EAAAA,IAAI,CAACJ,IAAD,EAAO;AACT,UAAMK,QAAQ,GAAIC,KAAD,IAAW;AAC1B,UAAIA,KAAJ,EAAW;AACT,4BAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WAAM,KAAKF,IAAL,CAAUE,KAAV,CAAN,CAAP;AACH;AACF,KAJC;AAOH;;AAECC,EAAAA,kBAAkB,GAAG;AACnB,UAAM;AAAEZ,MAAAA;AAAF,QAAY,KAAKpB,KAAL,CAAW6B,IAAX,CAAgB,CAAhB,CAAlB;AACA,QAAII,SAAS,GAAG,IAAhB;;AACA,QAAI,OAAOb,KAAP,IAAgB,WAApB,EAAiC;AAC/B,WAAKnB,SAAL,CAAe,KAAf;AACAgC,MAAAA,SAAS,GAAGb,KAAZ;AACD,KAHD,MAGO;AACL,WAAKnB,SAAL,CAAe,IAAf;AACAgC,MAAAA,SAAS,GAAG,KAAKjC,KAAL,CAAW6B,IAAX,CAAgB,CAAhB,CAAZ;AACD;;AACD,SAAK1B,QAAL,CAAc;AACVa,MAAAA,SAAS,EAAEiB;AADD,KAAd;AAGD;;AACDC,EAAAA,kBAAkB,GAAG;AACnB,SAAKxB,QAAL,CAAcC,OAAd,CAAsBC,KAAtB;AAAgC;;AAsBlCgB,EAAAA,UAAU,GAAG;AACX,SAAKzB,QAAL,CAAc;AAACoB,MAAAA,YAAY,EAAE;AAAf,KAAd;AACA3B,IAAAA,QAAQ,CAACuC,WAAT,CAAqB,KAAKC,IAAL,CAAU1B,QAA/B,EAAyCE,KAAzC;AACF;;AAkBFyB,EAAAA,MAAM,GAAG;AACL,UAAM;AAAER,MAAAA,IAAF;AAAOS,MAAAA,IAAP;AAAYC,MAAAA;AAAZ,QAAuB,KAAKvC,KAAlC;AACA,UAAMwC,iBAAiB,GAAI;;UAEzBF,IAAI,KAAK,IAAT,IAAiB,aAAc;SAFjC;AAIA,UAAOG,mBAAmB,GAAI;;UAE5BF,MAAM,KAAK,OAAX,IAAsB,YAAa;SAFrC;AAID;;AACA,QAAIG,SAAS,GAAGb,IAAhB;AAAA,QACAN,YAAY,GAAG,KAAKR,KAAL,CAAWQ,YAAX,CAAwBoB,IAAxB,GAA+BC,WAA/B,EADf;;AAEJ,QAAIrB,YAAY,CAACsB,MAAb,GAAsB,CAA1B,EAA6B;AAC3BH,MAAAA,SAAS,GAAGA,SAAS,CAACI,MAAV,CAAiB,UAASC,CAAT,EAAY;AACvC,eAAOA,CAAC,CAAC3B,KAAF,CAAQwB,WAAR,GAAsBI,KAAtB,CAA6BzB,YAA7B,CAAP;AACD,OAFW,CAAZ;AAGD;;AACI,wBACI;AAAK,MAAA,SAAS,EAAI,IAAGiB,iBAAkB,IAAG,KAAKzB,KAAL,CAAWT,MAAX,GAAoB,MAApB,GAA6B,EAAG,EAA1E;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACA;AAAQ,MAAA,SAAS,EAAEmC,mBAAnB;AAAwC,MAAA,IAAI,EAAC,QAA7C;AAAsD,MAAA,OAAO,EAAE,KAAKpC,YAApE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI,KAAKU,KAAL,CAAWC,SADf,CADA,eAMA;AAAI,MAAA,SAAS,EAAC,eAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE;AAAK,MAAA,SAAS,EAAC,gBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACG;AAAO,MAAA,IAAI,EAAC,MAAZ;AAAmB,MAAA,KAAK,EAAE,KAAKD,KAAL,CAAWQ,YAArC;AAAmD,MAAA,GAAG,EAAE,KAAKb,QAA7D;AAAwE,MAAA,QAAQ,EAAE,KAAKW,YAAvF;AAAqG,MAAA,WAAW,EAAC,cAAjH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADH,eAEG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAFH,CADF,CADJ,EAQGqB,SAAS,CAACO,GAAV,CAAc,KAAKhC,kBAAnB,CARH,CANA,CADJ;AAmBH;;AAlIkC;;AAAjCnB,c,CACKoD,S,GAAY;AACfrB,EAAAA,IAAI,EAAEhC,SAAS,CAACsD,KAAV,CAAgBC;AADP,C;AADjBtD,c,CAIOuD,Y,GAAe;AACpBxB,EAAAA,IAAI,EAAE;AADc,C;AAiI5B,eAAe/B,cAAf","sourcesContent":["import React, { Component } from 'react';\nimport ReactDOM from 'react-dom';\nimport PropTypes from 'prop-types';\n\nclass dropdownsearch extends Component {\n    static propTypes = {\n        list: PropTypes.array.isRequired\n      };\n      static defaultProps = {\n        list: []\n      };\n      \n      constructor(props) {\n        super(props);    \n        this.state = {\n          isOpen: false,\n          labelItem: null,\n          typeDropdown: null,\n          searchString: '',\n          data: '',\n         \n        };\n        this.inputRef = React.createRef();\n        this.showDropdown = this.showDropdown.bind(this);\n        this.handleChange = this.handleChange.bind(this);\n        this.clearInput = this.clearInput.bind(this);\n\n\n      }\n      list(data) {\n        const children = (items) => {\n          if (items) {\n            return <ul>{ this.list(items) }</ul>\n        }\n      }\n      \n      \n    }\n    \n      componentWillMount() {\n        const { label } = this.props.list[0];\n        let firstItem = null;    \n        if (typeof label != 'undefined') {\n          this.checkType(false);\n          firstItem = label;\n        } else {\n          this.checkType(true);\n          firstItem = this.props.list[0];\n        }        \n        this.setState({\n            labelItem: firstItem\n        });    \n      }\n      componentDidUpdate() {\n        this.inputRef.current.focus(); }\n      checkType = (value) => {\n        this.setState({\n            typeDropdown: value\n        });    \n      };\n      showDropdown = () => {\n        this.setState({ isOpen: true });\n        document.addEventListener(\"click\", this.hideDropdown);\n        this.inputRef.current.focus();\n      };\n      hideDropdown = () => {\n        this.setState({ isOpen: false });\n        document.removeEventListener(\"click\", this.hideDropdown);\n      };\n      chooseItem = (value) => {    \n        if (this.state.labelItem !== value) {\n          this.setState({\n            labelItem: value      \n          })\n        }    \n      };\n      clearInput() {\n        this.setState({searchString: ''});\n        ReactDOM.findDOMNode(this.refs.inputRef).focus();\n     }\n      \n      renderDataDropDown = (item, index) => {    \n        const {value, label} = this.state.typeDropdown ? {value: index, label: item} : item;    \n        return (\n          <li\n            key={index}\n            value={value}\n            onClick={() => this.chooseItem(label)}\n          >\n            <a>{label}</a>\n          </li> \n        )\n      };\n     \n   handleChange = (e) => {\n     this.setState({ searchString:e.target.value });\n   }\n    render() {\n        const { list,size,border } = this.props; \n        const dropdownClassname = `\n        dropdown\n        ${size === 'lg' && 'lg-dropdown'}\n        `;   \n        const  dropdowntoggleclass = `\n        dropdown-toggle\n        ${border === 'false' && 'bordernone'}\n        `;   \n       /* searching code start here*/ \n       var libraries = list,\n       searchString = this.state.searchString.trim().toLowerCase();\n   if (searchString.length > 0) {\n     libraries = libraries.filter(function(i) {\n       return i.label.toLowerCase().match( searchString );\n     });\n   }\n        return (\n            <div className={ ` ${dropdownClassname} ${this.state.isOpen ? 'open' : ''}`} >\n            <button className={dropdowntoggleclass} type=\"button\" onClick={this.showDropdown}>\n               {this.state.labelItem}\n              \n            </button>\n            \n            <ul className=\"dropdown-menu\">\n                <li>\n                  <div className=\"dropdownsearch\">\n                     <input type=\"text\" value={this.state.searchString} ref={this.inputRef}  onChange={this.handleChange} placeholder=\"Type here...\"/>\n                     <button></button>\n                  </div>\n                \n                </li>\n              {libraries.map(this.renderDataDropDown)}\n            </ul>\n        </div>\n        );\n    }\n}\n\nexport default dropdownsearch;"]},"metadata":{},"sourceType":"module"}