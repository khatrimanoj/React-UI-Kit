{"ast":null,"code":"var _jsxFileName = \"/home/mindbox/Documents/manoj/nexus/src/components/Sidebar/Types/LightVersion.js\";\nimport React, { Component } from 'react';\nimport UserAvatar from '../../Notification/avitar/avitar-dropdown/avitar_dropdownhtml';\nimport AvitarIcon from '../../../images/avitar.png';\nimport Icon from 'react-icons-kit';\n\nconst toggleCollectionProperty = ({\n  arrCollection,\n  targetId,\n  itemIdProp,\n  itemProp,\n  itemVal,\n  itemOppVal\n}) => {\n  const tplCollection = [...arrCollection];\n\n  for (let i = 0, l = tplCollection.length; i < l; i += 1) {\n    if (tplCollection[i][itemIdProp] === targetId) {\n      tplCollection[i][itemProp] = itemVal;\n    } else {\n      tplCollection[i][itemProp] = itemOppVal;\n    }\n  }\n\n  return tplCollection;\n};\n\nconst withActiveProp = Component => props => {\n  return props.active && React.createElement(Component, Object.assign({}, props, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 29\n    },\n    __self: this\n  }));\n};\n/*\n * Returns a text depending on the boolean value\n*/\n\n\nconst toggleText = (bool, val1, val2) => {\n  return bool ? val1 : val2;\n}; // Utility functions (They are all Pure)\n// --------------------------------------\n\n/*\n * Map a data list and each item, returns React Component\n*/\n\n\nconst ListComponent = ({\n  data: listData,\n  Component,\n  className\n}) => {\n  if (!listData) {\n    return false;\n  }\n\n  return React.createElement(React.Fragment, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60\n    },\n    __self: this\n  }, Component && listData.map((item, itemIndex) => React.createElement(React.Fragment, {\n    key: item.id,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64\n    },\n    __self: this\n  }, Component(item, itemIndex))));\n}; // Utility Components\n// ------------------\n\n\nconst BoxContainer = ({\n  className,\n  children\n}) => {\n  return React.createElement(\"div\", {\n    class: `panel ${className ? className : ''}`,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 81\n    },\n    __self: this\n  }, children);\n}; // Text and button component with a couple of functionality\n\n\nconst TextAndButton = ({\n  className,\n  btnState,\n  text,\n  handleClick\n}) => {\n  return React.createElement(\"div\", {\n    className: `${toggleText(className, className, '')}`,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 90\n    },\n    __self: this\n  }, React.createElement(\"h1\", {\n    className: `${toggleText(className, className, '')}--text`,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 91\n    },\n    __self: this\n  }, text), React.createElement(\"button\", {\n    onClick: handleClick,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 92\n    },\n    __self: this\n  }, toggleText(btnState, 'Close', 'Open')));\n}; // Utility Components\n// ------------------\n\n\nclass LightVersion extends Component {\n  render() {\n    return React.createElement(\"div\", {\n      className: \"sidebar\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 110\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"sidebar-head\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 111\n      },\n      __self: this\n    }, React.createElement(UserAvatar, {\n      title: \"Benjamin Parker\",\n      avitar: AvitarIcon,\n      hasRound: true,\n      haslg: true,\n      subtitle: \"\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 112\n      },\n      __self: this\n    }, React.createElement(\"img\", {\n      className: \"\",\n      src: AvitarIcon,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 113\n      },\n      __self: this\n    }))), React.createElement(\"ul\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 116\n      },\n      __self: this\n    }));\n  }\n\n}\n\nexport default LightVersion;","map":{"version":3,"sources":["/home/mindbox/Documents/manoj/nexus/src/components/Sidebar/Types/LightVersion.js"],"names":["React","Component","UserAvatar","AvitarIcon","Icon","toggleCollectionProperty","arrCollection","targetId","itemIdProp","itemProp","itemVal","itemOppVal","tplCollection","i","l","length","withActiveProp","props","active","toggleText","bool","val1","val2","ListComponent","data","listData","className","map","item","itemIndex","id","BoxContainer","children","TextAndButton","btnState","text","handleClick","LightVersion","render"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport UserAvatar from '../../Notification/avitar/avitar-dropdown/avitar_dropdownhtml'\nimport AvitarIcon from '../../../images/avitar.png';\nimport Icon from 'react-icons-kit';\n\nconst toggleCollectionProperty = ({\n    arrCollection, \n    targetId, \n    itemIdProp,\n    itemProp, \n    itemVal, \n    itemOppVal,\n  }) => {\n    const tplCollection = [...arrCollection];\n    for(let i = 0, l=tplCollection.length; i < l; i += 1) {\n      if(tplCollection[i][itemIdProp] === targetId) {\n        tplCollection[i][itemProp] = itemVal;\n      } else {\n        tplCollection[i][itemProp] = itemOppVal;\n      }\n    }\n    \n    return tplCollection;\n  };\n  \n  \n  const withActiveProp = Component => props => {\n    return (\n      props.active && <Component\n        {...props}\n      />\n    );\n  };\n    \n    \n  \n  /*\n   * Returns a text depending on the boolean value\n  */\n  const toggleText = (bool, val1, val2) => {\n    return bool ? val1 : val2;\n  };\n  // Utility functions (They are all Pure)\n  // --------------------------------------\n  \n  \n  \n  /*\n   * Map a data list and each item, returns React Component\n  */\n  const ListComponent = ({ data: listData, Component, className }) => {\n  \n    if (!listData) {\n  \n      return false;\n  \n    }\n  \n    return (\n      <React.Fragment>\n        {\n          \n          Component && listData.map((item, itemIndex) => (\n            <React.Fragment key={item.id}>\n              { Component(item, itemIndex) }\n            </React.Fragment>\n          ))\n        }\n      </React.Fragment>\n    );\n  \n  };\n  \n  \n  \n  \n  // Utility Components\n  // ------------------\n  const BoxContainer = ({ className, children }) => {\n    return (\n      <div class={`panel ${className?className:''}`}>\n        { children }\n      </div>\n    );\n  };\n  \n  // Text and button component with a couple of functionality\n  const TextAndButton = ({ className, btnState, text, handleClick }) => {\n    return (\n      <div className={`${toggleText(className, className, '')}`}>\n        <h1 className={`${toggleText(className, className, '')}--text`}>{ text }</h1>\n        <button onClick={handleClick}>\n          {\n            toggleText(btnState, 'Close', 'Open') \n          }\n        </button>\n      </div>\n    );\n  };\n  \n  \n  \n  \n  // Utility Components\n  // ------------------\nclass LightVersion extends Component {\n\n    render() {\n        return (\n            <div className=\"sidebar\">\n                <div className=\"sidebar-head\">\n                    <UserAvatar title=\"Benjamin Parker\"  avitar={AvitarIcon} hasRound haslg subtitle=\"\"> \n                        <img className=\"\" src={AvitarIcon} />\n                    </UserAvatar> \n                </div>\n                <ul>\n                </ul>\n            </div>\n        );\n    }\n}\n\nexport default LightVersion;"]},"metadata":{},"sourceType":"module"}