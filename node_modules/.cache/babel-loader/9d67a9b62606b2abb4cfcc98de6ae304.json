{"ast":null,"code":"var _jsxFileName = \"/home/mindbox/Documents/manoj/nexus/src/components/Carousel/Carousel.js\";\n\n/* eslint-disable react/no-unused-prop-types */\n// we disable propTypes usage checking as we use getProp function\nimport React, { Component } from 'react';\nimport throttle from 'lodash/throttle';\nimport isNil from 'lodash/isNil';\nimport has from 'lodash/has';\nimport concat from 'lodash/concat';\nimport times from 'lodash/times';\nimport PropTypes from 'prop-types';\nimport classnames from 'classnames';\nimport config from './Config';\nimport CarouselItem from './CarouselItem';\nimport Dots from './CarouselDots';\nimport './Carousel.css';\nimport './Arrows.css';\n\nclass Carousel extends Component {\n  constructor(_props) {\n    super(_props);\n\n    this.getCurrentValue = () => this.props.infinite ? this.props.value : this.clamp(this.props.value);\n\n    this.getNeededAdditionalClones = () => Math.ceil((this.getCurrentValue() - this.state.infiniteTransitionFrom) / this.getChildren().length);\n\n    this.getAdditionalClonesLeft = () => {\n      const additionalClones = this.getNeededAdditionalClones();\n      return additionalClones < 0 ? -additionalClones : 0;\n    };\n\n    this.getAdditionalClonesRight = () => {\n      const additionalClones = this.getNeededAdditionalClones();\n      return additionalClones > 0 ? additionalClones : 0;\n    };\n\n    this.getClonesLeft = () => config.numberOfInfiniteClones + this.getAdditionalClonesLeft();\n\n    this.getClonesRight = () => config.numberOfInfiniteClones + this.getAdditionalClonesRight();\n\n    this.getAdditionalClonesOffset = () => -this.getChildren().length * this.getCarouselElementWidth() * this.getAdditionalClonesLeft();\n\n    this.getProp = (propName, customProps = null) => {\n      const props = customProps || this.props;\n      let activeBreakpoint = null;\n\n      if (props.breakpoints) {\n        const windowWidth = this.state.windowWidth;\n        const resolutions = Object.keys(props.breakpoints);\n        resolutions.forEach(resolutionString => {\n          const resolution = parseInt(resolutionString);\n\n          if (windowWidth <= resolution) {\n            if (!activeBreakpoint || activeBreakpoint > resolution) {\n              activeBreakpoint = resolution;\n            }\n          }\n        });\n      }\n\n      if (activeBreakpoint) {\n        if (has(props.breakpoints[activeBreakpoint], propName)) {\n          return props.breakpoints[activeBreakpoint][propName];\n        }\n      }\n\n      return props[propName];\n    };\n\n    this.checkIfValueChanged = prevProps => {\n      const currentValue = this.getProp('infinite') ? this.props.value : this.clamp(this.props.value);\n      const prevValue = this.getProp('infinite') ? prevProps.value : this.clamp(prevProps.value);\n      return currentValue !== prevValue;\n    };\n\n    this.resetInterval = () => {\n      if (this.interval) {\n        clearInterval(this.interval);\n      }\n\n      const autoPlay = this.getProp('autoPlay');\n\n      if (!isNil(autoPlay)) {\n        this.interval = setInterval(() => {\n          if (!document.hidden && !this.state.isAutoPlayStopped) {\n            this.nextSlide();\n          }\n        }, autoPlay);\n      }\n    };\n\n    this.getChildren = () => {\n      if (!this.props.children) {\n        if (this.props.slides) {\n          return this.props.slides;\n        }\n\n        return [];\n      }\n\n      if (Array.isArray(this.props.children)) {\n        return this.props.children;\n      }\n\n      return [this.props.children];\n    };\n\n    this.getActiveSlideIndex = () => this.getProp('infinite') ? this.getCurrentSlideIndex() + this.getClonesLeft() * this.getChildren().length : this.getCurrentSlideIndex();\n\n    this.getTargetMod = (customValue = null) => {\n      const value = isNil(customValue) ? this.getCurrentValue() : customValue;\n      const length = this.getChildren().length;\n      let targetSlide;\n\n      if (value >= 0) {\n        targetSlide = value % length;\n      } else {\n        targetSlide = (length - Math.abs(value % length)) % length;\n      }\n\n      return targetSlide;\n    };\n\n    this.getTargetSlide = () => {\n      if (!isNil(this.state.infiniteTransitionFrom)) {\n        const mod = this.getTargetMod(this.state.infiniteTransitionFrom);\n        const value = this.getCurrentValue();\n        return mod + (value - this.state.infiniteTransitionFrom);\n      }\n\n      return this.getTargetMod();\n    };\n\n    this.onResize = throttle(() => {\n      if (!this.node) {\n        return;\n      }\n\n      const arrowLeftWidth = this.arrowLeftNode && this.arrowLeftNode.offsetWidth;\n      const arrowRightWidth = this.arrowRightNode && this.arrowRightNode.offsetWidth;\n      const width = this.node.offsetWidth - (arrowLeftWidth || -2) - (arrowRightWidth || -2);\n      this.setState(() => ({\n        carouselWidth: width,\n        windowWidth: window.innerWidth\n      }));\n    }, config.resizeEventListenerThrottle);\n\n    this.onMouseDown = (e, index) => {\n      e.preventDefault();\n      e.stopPropagation();\n      const {\n        pageX\n      } = e;\n      this.setState(() => ({\n        clicked: index,\n        dragStart: pageX\n      }));\n    };\n\n    this.onMouseMove = e => {\n      const {\n        pageX\n      } = e;\n\n      if (this.state.dragStart !== null) {\n        this.setState(previousState => ({\n          dragOffset: this.getProp('rtl') ? previousState.dragStart - pageX : pageX - previousState.dragStart\n        }));\n      }\n    };\n\n    this.onTouchStart = (e, index) => {\n      const {\n        changedTouches\n      } = e;\n      this.setState(() => ({\n        clicked: index,\n        dragStart: changedTouches[0].pageX\n      }));\n    };\n\n    this.onMouseUpTouchEnd = e => {\n      if (this.state.dragStart !== null) {\n        e.preventDefault();\n\n        if (this.getProp('draggable') && Math.abs(this.state.dragOffset) > config.clickDragThreshold) {\n          this.changeSlide(this.getNearestSlideIndex());\n        } else if (this.getProp('clickToChange')) {\n          this.changeSlide(this.getProp('infinite') ? this.getCurrentValue() + this.state.clicked - this.getActiveSlideIndex() : this.state.clicked);\n        }\n\n        this.setState(() => ({\n          clicked: null,\n          dragOffset: 0,\n          dragStart: null,\n          transitionEnabled: true\n        }));\n      }\n    };\n\n    this.onTransitionEnd = () => {\n      const infinite = this.getProp('infinite');\n      this.setState(() => ({\n        transitionEnabled: !infinite,\n        infiniteTransitionFrom: infinite ? this.getCurrentValue() : null\n      }));\n    };\n\n    this.onMouseEnter = () => {\n      this.setState(() => ({\n        isAutoPlayStopped: true\n      }));\n    };\n\n    this.onMouseLeave = () => {\n      this.setState(() => ({\n        isAutoPlayStopped: false\n      }));\n      this.resetInterval();\n    };\n\n    this.simulateEvent = e => {\n      const touch = e.changedTouches[0];\n      const {\n        screenX,\n        screenY,\n        clientX,\n        clientY\n      } = touch;\n      const touchEventMap = {\n        touchstart: 'mousedown',\n        touchmove: 'mousemove',\n        touchend: 'mouseup'\n      };\n      const simulatedEvent = new MouseEvent(touchEventMap[e.type], {\n        bubbles: true,\n        cancelable: true,\n        view: window,\n        detail: 1,\n        screenX,\n        screenY,\n        clientX,\n        clientY\n      });\n      touch.target.dispatchEvent(simulatedEvent);\n    };\n\n    this.clamp = value => {\n      const maxValue = this.getChildren().length - 1;\n\n      if (value > maxValue) {\n        return maxValue;\n      }\n\n      if (value < 0) {\n        return 0;\n      }\n\n      return value;\n    };\n\n    this.changeSlide = value => this.props.onChange(this.getProp('infinite') ? value : this.clamp(value));\n\n    this.nextSlide = () => this.changeSlide(this.getCurrentValue() + this.getProp('slidesPerScroll'));\n\n    this.prevSlide = () => this.changeSlide(this.getCurrentValue() - this.getProp('slidesPerScroll'));\n\n    this.getNearestSlideIndex = () => {\n      let slideIndexOffset = 0;\n\n      if (this.getProp('keepDirectionWhenDragging')) {\n        if (this.state.dragOffset > 0) {\n          slideIndexOffset = -Math.ceil(this.state.dragOffset / this.getCarouselElementWidth());\n        } else {\n          slideIndexOffset = -Math.floor(this.state.dragOffset / this.getCarouselElementWidth());\n        }\n      } else {\n        slideIndexOffset = -Math.round(this.state.dragOffset / this.getCarouselElementWidth());\n      }\n\n      return this.getCurrentValue() + slideIndexOffset;\n    };\n\n    this.getCurrentSlideIndex = () => {\n      if (this.getProp('infinite')) {\n        return this.getTargetSlide();\n      }\n\n      return this.clamp(this.getCurrentValue());\n    };\n\n    this.getCarouselElementWidth = () => this.props.itemWidth || this.state.carouselWidth / this.getProp('slidesPerPage');\n\n    this.getTransformOffset = () => {\n      const elementWidthWithOffset = this.getCarouselElementWidth() + this.getProp('offset');\n      const additionalOffset = this.getProp('centered') ? this.state.carouselWidth / 2 - elementWidthWithOffset / 2 : 0;\n      const dragOffset = this.getProp('draggable') ? this.state.dragOffset : 0;\n      const currentValue = this.getActiveSlideIndex();\n      const additionalClonesOffset = this.getAdditionalClonesOffset();\n      return dragOffset - currentValue * elementWidthWithOffset + additionalOffset - additionalClonesOffset;\n    };\n\n    this.renderCarouselItems = () => {\n      const isRTL = this.getProp('rtl');\n      const transformOffset = this.getTransformOffset();\n      const children = this.getChildren();\n      const numberOfClonesLeft = this.getClonesLeft();\n      const numberOfClonesRight = this.getClonesRight();\n      const trackLengthMultiplier = 1 + (this.getProp('infinite') ? numberOfClonesLeft + numberOfClonesRight : 0);\n      const trackWidth = this.state.carouselWidth * children.length * trackLengthMultiplier;\n      const animationSpeed = this.getProp('animationSpeed');\n      const transitionEnabled = this.state.transitionEnabled;\n      const draggable = this.getProp('draggable') && children && children.length > 1;\n      const trackStyles = {\n        width: `${trackWidth}px`,\n        transitionDuration: transitionEnabled ? `${animationSpeed}ms, ${animationSpeed}ms` : null\n      };\n\n      if (isRTL) {\n        trackStyles.marginRight = `${this.getAdditionalClonesOffset()}px`;\n        trackStyles.transform = `translateX(${-transformOffset}px)`;\n      } else {\n        trackStyles.marginLeft = `${this.getAdditionalClonesOffset()}px`;\n        trackStyles.transform = `translateX(${transformOffset}px)`;\n      }\n\n      let slides = children;\n\n      if (this.getProp('infinite')) {\n        const clonesLeft = times(numberOfClonesLeft, () => children);\n        const clonesRight = times(numberOfClonesRight, () => children);\n        slides = isRTL ? concat(...clonesRight, children, ...clonesLeft) : concat(...clonesLeft, children, ...clonesRight);\n      }\n\n      const isAutoPlay = this.getProp('autoPlay');\n      const isStopAutoPlayOnHover = this.getProp('stopAutoPlayOnHover');\n\n      const handleAutoPlayEvent = action => isAutoPlay && isStopAutoPlayOnHover ? action : null;\n\n      return React.createElement(\"div\", {\n        className: \"Carousel__trackContainer\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 536\n        },\n        __self: this\n      }, React.createElement(\"ul\", {\n        className: classnames('Carousel__track', {\n          'Carousel__track--transition': transitionEnabled,\n          'Carousel__track--draggable': draggable\n        }),\n        style: trackStyles,\n        ref: el => this.trackRef = el,\n        onMouseEnter: handleAutoPlayEvent(this.onMouseEnter),\n        onMouseLeave: handleAutoPlayEvent(this.onMouseLeave),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 537\n        },\n        __self: this\n      }, slides.map((carouselItem, index) => // eslint-disable-next-line no-undefined\n      [null, undefined].includes(carouselItem) ? null : React.createElement(CarouselItem, {\n        key: index,\n        currentSlideIndex: this.getActiveSlideIndex(),\n        index: index,\n        width: this.getCarouselElementWidth(),\n        offset: index !== slides.length ? this.props.offset : 0,\n        onMouseDown: this.onMouseDown,\n        onTouchStart: this.onTouchStart,\n        clickable: this.getProp('clickToChange'),\n        isDragging: Math.abs(this.state.dragOffset) > this.props.minDraggableOffset,\n        isDraggingEnabled: this.props.draggable || this.props.clickToChange,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 553\n        },\n        __self: this\n      }, carouselItem))));\n    };\n\n    this.renderArrowWithAddedHandler = (element, onClick, name, disable = false) => React.createElement(\"div\", {\n      className: classnames('Carousel__customArrows', {\n        'Carousel__arrow--disable': disable\n      }, `Carousel__custom-${name}`),\n      ref: el => this[`${name}Node`] = el,\n      onClick: this.getProp('addArrowClickHandler') ? onClick : null,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 583\n      },\n      __self: this\n    }, element);\n\n    this.renderArrowLeft = () => {\n      const value = this.getCurrentValue();\n      const disabled = value <= 0 && !this.getProp('infinite');\n\n      if (this.getProp('arrowLeft')) {\n        if (!disabled) {\n          return this.renderArrowWithAddedHandler(this.getProp('arrowLeft'), this.prevSlide, 'arrowLeft');\n        }\n\n        const arrow = this.getProp('arrowLeftDisabled') ? this.getProp('arrowLeftDisabled') : this.getProp('arrowLeft');\n        return this.renderArrowWithAddedHandler(arrow, this.prevSlide, 'arrowLeft', disabled);\n      }\n\n      if (this.getProp('arrows')) {\n        return React.createElement(\"button\", {\n          className: \"Carousel__arrows Carousel__arrowLeft\",\n          onClick: this.prevSlide,\n          ref: el => this.arrowLeftNode = el,\n          disabled: disabled,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 617\n          },\n          __self: this\n        }, React.createElement(\"span\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 623\n          },\n          __self: this\n        }, \"prev\"));\n      }\n\n      return null;\n    };\n\n    this.renderArrowRight = () => {\n      const slides = this.getChildren();\n      const value = this.getCurrentValue();\n      const lastSlideIndex = slides.length - 1;\n      const disabled = value === lastSlideIndex && !this.getProp('infinite');\n\n      if (this.getProp('arrowRight')) {\n        if (!disabled) {\n          return this.renderArrowWithAddedHandler(this.getProp('arrowRight'), this.nextSlide, 'arrowRight');\n        }\n\n        const arrow = this.getProp('arrowRightDisabled') ? this.getProp('arrowRightDisabled') : this.getProp('arrowRight');\n        return this.renderArrowWithAddedHandler(arrow, this.nextSlide, 'arrowRight', disabled);\n      }\n\n      if (this.getProp('arrows')) {\n        return React.createElement(\"button\", {\n          className: \"Carousel__arrows Carousel__arrowRight\",\n          onClick: this.nextSlide,\n          ref: el => this.arrowRightNode = el,\n          disabled: disabled,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 649\n          },\n          __self: this\n        }, React.createElement(\"span\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 655\n          },\n          __self: this\n        }, \"next\"));\n      }\n\n      return null;\n    };\n\n    this.state = {\n      carouselWidth: 0,\n      windowWidth: 0,\n      clicked: null,\n      dragOffset: 0,\n      dragStart: null,\n      transitionEnabled: false,\n      infiniteTransitionFrom: _props.infinite ? _props.value : null,\n      // indicates what slide we are transitioning from (in case of infinite carousel), contains number value or null\n      isAutoPlayStopped: false\n    };\n    this.interval = null;\n  }\n  /* ========== initial handlers and positioning setup ========== */\n\n\n  componentDidMount() {\n    // adding listener to remove transition when animation finished\n    this.trackRef && this.trackRef.addEventListener('transitionend', this.onTransitionEnd); // adding event listeners for swipe\n\n    if (this.node) {\n      this.node.parentElement.addEventListener('mousemove', this.onMouseMove, true);\n      document.addEventListener('mouseup', this.onMouseUpTouchEnd, true);\n      this.node.parentElement.addEventListener('touchstart', this.simulateEvent, true);\n      this.node.parentElement.addEventListener('touchmove', this.simulateEvent, {\n        passive: false\n      });\n      this.node.parentElement.addEventListener('touchend', this.simulateEvent, true);\n    } // setting size of a carousel in state\n\n\n    window.addEventListener('resize', this.onResize);\n    this.onResize(); // setting size of a carousel in state based on styling\n\n    window.addEventListener('load', this.onResize); // setting autoplay interval\n\n    this.resetInterval();\n  }\n\n  componentDidUpdate(prevProps) {\n    const valueChanged = this.checkIfValueChanged(prevProps);\n\n    if (this.getProp('autoPlay') !== this.getProp('autoPlay', prevProps) || valueChanged) {\n      this.resetInterval();\n    }\n\n    if (valueChanged) {\n      this.setState({\n        transitionEnabled: true\n      });\n    }\n  }\n\n  componentWillUnmount() {\n    this.trackRef && this.trackRef.removeEventListener('transitionend', this.onTransitionEnd);\n\n    if (this.node) {\n      this.node.parentElement.removeEventListener('mousemove', this.onMouseMove);\n      document.removeEventListener('mouseup', this.onMouseUpTouchEnd);\n      this.node.parentElement.removeEventListener('touchstart', this.simulateEvent);\n      this.node.parentElement.removeEventListener('touchmove', this.simulateEvent);\n      this.node.parentElement.removeEventListener('touchend', this.simulateEvent);\n    }\n\n    window.removeEventListener('resize', this.onResize);\n    window.removeEventListener('load', this.onResize);\n\n    if (this.interval) {\n      clearInterval(this.interval);\n    }\n  }\n  /* ========== tools ========== */\n\n\n  renderDots() {\n    if (this.getProp('dots')) {\n      return React.createElement(Dots, {\n        value: this.getCurrentValue(),\n        onChange: this.changeSlide,\n        number: this.getChildren().length,\n        rtl: this.getProp('rtl'),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 664\n        },\n        __self: this\n      });\n    }\n\n    return null;\n  }\n\n  render() {\n    const isRTL = this.getProp('rtl');\n    return React.createElement(React.Fragment, null, React.createElement(\"div\", {\n      className: \"arrows\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 673\n      },\n      __self: this\n    }, this.renderArrowLeft(), this.renderArrowRight()), React.createElement(\"div\", {\n      className: classnames('Carousel', this.getProp('className'), isRTL ? 'Carousel--isRTL' : ''),\n      ref: el => this.node = el,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 677\n      },\n      __self: this\n    }, this.renderCarouselItems()), this.renderDots());\n  }\n\n}\n\nCarousel.propTypes = {\n  value: PropTypes.number,\n  onChange: PropTypes.func,\n  children: PropTypes.node,\n  slides: PropTypes.arrayOf(PropTypes.node),\n  slidesPerPage: PropTypes.number,\n  slidesPerScroll: PropTypes.number,\n  itemWidth: PropTypes.number,\n  offset: PropTypes.number,\n  arrows: PropTypes.bool,\n  arrowLeft: PropTypes.element,\n  arrowRight: PropTypes.element,\n  addArrowClickHandler: PropTypes.bool,\n  autoPlay: PropTypes.number,\n  stopAutoPlayOnHover: PropTypes.bool,\n  clickToChange: PropTypes.bool,\n  centered: PropTypes.bool,\n  infinite: PropTypes.bool,\n  rtl: PropTypes.bool,\n  draggable: PropTypes.bool,\n  keepDirectionWhenDragging: PropTypes.bool,\n  animationSpeed: PropTypes.number,\n  dots: PropTypes.bool,\n  className: PropTypes.string,\n  minDraggableOffset: PropTypes.number,\n  breakpoints: PropTypes.objectOf(PropTypes.shape({\n    slidesPerPage: PropTypes.number,\n    slidesPerScroll: PropTypes.number,\n    arrows: PropTypes.bool,\n    arrowLeft: PropTypes.element,\n    arrowRight: PropTypes.element,\n    addArrowClickHandler: PropTypes.bool,\n    autoPlay: PropTypes.number,\n    stopAutoPlayOnHover: PropTypes.bool,\n    clickToChange: PropTypes.bool,\n    centered: PropTypes.bool,\n    infinite: PropTypes.bool,\n    draggable: PropTypes.bool,\n    keepDirectionWhenDragging: PropTypes.bool,\n    animationSpeed: PropTypes.number,\n    dots: PropTypes.bool,\n    className: PropTypes.string\n  }))\n};\nCarousel.defaultProps = {\n  offset: 0,\n  slidesPerPage: 1,\n  slidesPerScroll: 1,\n  animationSpeed: 500,\n  draggable: true,\n  rtl: false,\n  minDraggableOffset: 10\n};\nexport default Carousel;","map":{"version":3,"sources":["/home/mindbox/Documents/manoj/nexus/src/components/Carousel/Carousel.js"],"names":["React","Component","throttle","isNil","has","concat","times","PropTypes","classnames","config","CarouselItem","Dots","Carousel","constructor","props","getCurrentValue","infinite","value","clamp","getNeededAdditionalClones","Math","ceil","state","infiniteTransitionFrom","getChildren","length","getAdditionalClonesLeft","additionalClones","getAdditionalClonesRight","getClonesLeft","numberOfInfiniteClones","getClonesRight","getAdditionalClonesOffset","getCarouselElementWidth","getProp","propName","customProps","activeBreakpoint","breakpoints","windowWidth","resolutions","Object","keys","forEach","resolutionString","resolution","parseInt","checkIfValueChanged","prevProps","currentValue","prevValue","resetInterval","interval","clearInterval","autoPlay","setInterval","document","hidden","isAutoPlayStopped","nextSlide","children","slides","Array","isArray","getActiveSlideIndex","getCurrentSlideIndex","getTargetMod","customValue","targetSlide","abs","getTargetSlide","mod","onResize","node","arrowLeftWidth","arrowLeftNode","offsetWidth","arrowRightWidth","arrowRightNode","width","setState","carouselWidth","window","innerWidth","resizeEventListenerThrottle","onMouseDown","e","index","preventDefault","stopPropagation","pageX","clicked","dragStart","onMouseMove","previousState","dragOffset","onTouchStart","changedTouches","onMouseUpTouchEnd","clickDragThreshold","changeSlide","getNearestSlideIndex","transitionEnabled","onTransitionEnd","onMouseEnter","onMouseLeave","simulateEvent","touch","screenX","screenY","clientX","clientY","touchEventMap","touchstart","touchmove","touchend","simulatedEvent","MouseEvent","type","bubbles","cancelable","view","detail","target","dispatchEvent","maxValue","onChange","prevSlide","slideIndexOffset","floor","round","itemWidth","getTransformOffset","elementWidthWithOffset","additionalOffset","additionalClonesOffset","renderCarouselItems","isRTL","transformOffset","numberOfClonesLeft","numberOfClonesRight","trackLengthMultiplier","trackWidth","animationSpeed","draggable","trackStyles","transitionDuration","marginRight","transform","marginLeft","clonesLeft","clonesRight","isAutoPlay","isStopAutoPlayOnHover","handleAutoPlayEvent","action","el","trackRef","map","carouselItem","undefined","includes","offset","minDraggableOffset","clickToChange","renderArrowWithAddedHandler","element","onClick","name","disable","renderArrowLeft","disabled","arrow","renderArrowRight","lastSlideIndex","componentDidMount","addEventListener","parentElement","passive","componentDidUpdate","valueChanged","componentWillUnmount","removeEventListener","renderDots","render","propTypes","number","func","arrayOf","slidesPerPage","slidesPerScroll","arrows","bool","arrowLeft","arrowRight","addArrowClickHandler","stopAutoPlayOnHover","centered","rtl","keepDirectionWhenDragging","dots","className","string","objectOf","shape","defaultProps"],"mappings":"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","sourcesContent":["/* eslint-disable react/no-unused-prop-types */ // we disable propTypes usage checking as we use getProp function\nimport React, { Component } from 'react';\nimport throttle from 'lodash/throttle';\nimport isNil from 'lodash/isNil';\nimport has from 'lodash/has';\nimport concat from 'lodash/concat';\nimport times from 'lodash/times';\nimport PropTypes from 'prop-types';\nimport classnames from 'classnames';\n\nimport config from './Config';\n\nimport CarouselItem from './CarouselItem';\nimport Dots from './CarouselDots';\nimport './Carousel.css';\nimport './Arrows.css';\n\nclass Carousel extends Component {\n  static propTypes = {\n    value: PropTypes.number,\n    onChange: PropTypes.func,\n    children: PropTypes.node,\n    slides: PropTypes.arrayOf(PropTypes.node),\n    slidesPerPage: PropTypes.number,\n    slidesPerScroll: PropTypes.number,\n    itemWidth: PropTypes.number,\n    offset: PropTypes.number,\n    arrows: PropTypes.bool,\n    arrowLeft: PropTypes.element,\n    arrowRight: PropTypes.element,\n    addArrowClickHandler: PropTypes.bool,\n    autoPlay: PropTypes.number,\n    stopAutoPlayOnHover: PropTypes.bool,\n    clickToChange: PropTypes.bool,\n    centered: PropTypes.bool,\n    infinite: PropTypes.bool,\n    rtl: PropTypes.bool,\n    draggable: PropTypes.bool,\n    keepDirectionWhenDragging: PropTypes.bool,\n    animationSpeed: PropTypes.number,\n    dots: PropTypes.bool,\n    className: PropTypes.string,\n    minDraggableOffset: PropTypes.number,\n    breakpoints: PropTypes.objectOf(PropTypes.shape({\n      slidesPerPage: PropTypes.number,\n      slidesPerScroll: PropTypes.number,\n      arrows: PropTypes.bool,\n      arrowLeft: PropTypes.element,\n      arrowRight: PropTypes.element,\n      addArrowClickHandler: PropTypes.bool,\n      autoPlay: PropTypes.number,\n      stopAutoPlayOnHover: PropTypes.bool,\n      clickToChange: PropTypes.bool,\n      centered: PropTypes.bool,\n      infinite: PropTypes.bool,\n      draggable: PropTypes.bool,\n      keepDirectionWhenDragging: PropTypes.bool,\n      animationSpeed: PropTypes.number,\n      dots: PropTypes.bool,\n      className: PropTypes.string,\n    })),\n  };\n  static defaultProps = {\n    offset: 0,\n    slidesPerPage: 1,\n    slidesPerScroll: 1,\n    animationSpeed: 500,\n    draggable: true,\n    rtl: false,\n    minDraggableOffset: 10,\n  };\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      carouselWidth: 0,\n      windowWidth: 0,\n      clicked: null,\n      dragOffset: 0,\n      dragStart: null,\n      transitionEnabled: false,\n      infiniteTransitionFrom: props.infinite ? props.value : null, // indicates what slide we are transitioning from (in case of infinite carousel), contains number value or null\n      isAutoPlayStopped: false,\n    };\n    this.interval = null;\n  }\n\n  /* ========== initial handlers and positioning setup ========== */\n  componentDidMount() {\n    // adding listener to remove transition when animation finished\n    this.trackRef && this.trackRef.addEventListener('transitionend', this.onTransitionEnd);\n\n    // adding event listeners for swipe\n    if (this.node) {\n      this.node.parentElement.addEventListener('mousemove', this.onMouseMove, true);\n      document.addEventListener('mouseup', this.onMouseUpTouchEnd, true);\n      this.node.parentElement.addEventListener('touchstart', this.simulateEvent, true);\n      this.node.parentElement.addEventListener('touchmove', this.simulateEvent, { passive: false });\n      this.node.parentElement.addEventListener('touchend', this.simulateEvent, true);\n    }\n\n    // setting size of a carousel in state\n    window.addEventListener('resize', this.onResize);\n    this.onResize();\n\n    // setting size of a carousel in state based on styling\n    window.addEventListener('load', this.onResize);\n\n    // setting autoplay interval\n    this.resetInterval();\n  }\n\n  componentDidUpdate(prevProps) {\n    const valueChanged = this.checkIfValueChanged(prevProps);\n    if (this.getProp('autoPlay') !== this.getProp('autoPlay', prevProps) || valueChanged) {\n      this.resetInterval();\n    }\n\n    if (valueChanged) {\n      this.setState({\n        transitionEnabled: true,\n      });\n    }\n  }\n\n  componentWillUnmount() {\n    this.trackRef && this.trackRef.removeEventListener('transitionend', this.onTransitionEnd);\n\n    if (this.node) {\n      this.node.parentElement.removeEventListener('mousemove', this.onMouseMove);\n      document.removeEventListener('mouseup', this.onMouseUpTouchEnd);\n      this.node.parentElement.removeEventListener('touchstart', this.simulateEvent);\n      this.node.parentElement.removeEventListener('touchmove', this.simulateEvent);\n      this.node.parentElement.removeEventListener('touchend', this.simulateEvent);\n    }\n\n    window.removeEventListener('resize', this.onResize);\n    window.removeEventListener('load', this.onResize);\n    if (this.interval) {\n      clearInterval(this.interval);\n    }\n  }\n\n  /* ========== tools ========== */\n  getCurrentValue = () => this.props.infinite ? this.props.value : this.clamp(this.props.value);\n\n  getNeededAdditionalClones = () =>\n    Math.ceil((this.getCurrentValue() - this.state.infiniteTransitionFrom) / this.getChildren().length);\n\n  getAdditionalClonesLeft = () => {\n    const additionalClones = this.getNeededAdditionalClones();\n    return additionalClones < 0 ? -additionalClones : 0;\n  };\n  getAdditionalClonesRight = () => {\n    const additionalClones = this.getNeededAdditionalClones();\n    return additionalClones > 0 ? additionalClones : 0;\n  };\n  getClonesLeft = () => config.numberOfInfiniteClones + this.getAdditionalClonesLeft();\n  getClonesRight = () => config.numberOfInfiniteClones + this.getAdditionalClonesRight();\n\n  getAdditionalClonesOffset = () =>\n    -this.getChildren().length * this.getCarouselElementWidth() * this.getAdditionalClonesLeft();\n\n  /**\n   * Returns the value of a prop based on the current window width and breakpoints provided\n   * @param {string} propName name of the prop you want to get\n   * @param {object} customProps props object (used e.g. when you want to get prop from prevProps object instead of this.props)\n   * @return {any} props value\n   */\n  getProp = (propName, customProps = null) => {\n    const props = customProps || this.props;\n    let activeBreakpoint = null;\n    if (props.breakpoints) {\n      const windowWidth = this.state.windowWidth;\n      const resolutions = Object.keys(props.breakpoints);\n      resolutions.forEach(resolutionString => {\n        const resolution = parseInt(resolutionString);\n        if (windowWidth <= resolution) {\n          if (!activeBreakpoint || activeBreakpoint > resolution) {\n            activeBreakpoint = resolution;\n          }\n        }\n      });\n    }\n    if (activeBreakpoint) {\n      if (has(props.breakpoints[activeBreakpoint], propName)) {\n        return props.breakpoints[activeBreakpoint][propName];\n      }\n    }\n    return props[propName];\n  };\n\n  /**\n   * Check if this.props.value changed after update\n   * @param {object} prevProps\n   * @return {boolean} result\n   */\n  checkIfValueChanged = prevProps => {\n    const currentValue = this.getProp('infinite') ? this.props.value : this.clamp(this.props.value);\n    const prevValue = this.getProp('infinite') ? prevProps.value : this.clamp(prevProps.value);\n    return currentValue !== prevValue;\n  };\n\n  resetInterval = () => {\n    if (this.interval) {\n      clearInterval(this.interval);\n    }\n    const autoPlay = this.getProp('autoPlay');\n    if (!isNil(autoPlay)) {\n      this.interval = setInterval(() => {\n        if (!document.hidden && !this.state.isAutoPlayStopped) {\n          this.nextSlide();\n        }\n      }, autoPlay);\n    }\n  };\n\n  getChildren = () => {\n    if (!this.props.children) {\n      if (this.props.slides) {\n        return this.props.slides;\n      }\n      return [];\n    }\n    if (Array.isArray(this.props.children)) {\n      return this.props.children;\n    }\n    return [this.props.children];\n  };\n\n  getActiveSlideIndex = () => this.getProp('infinite')\n    ? this.getCurrentSlideIndex() + this.getClonesLeft() * this.getChildren().length\n    : this.getCurrentSlideIndex();\n\n  getTargetMod = (customValue = null) => {\n    const value = isNil(customValue) ? this.getCurrentValue() : customValue;\n    const length = this.getChildren().length;\n    let targetSlide;\n    if (value >= 0) {\n      targetSlide = value % length;\n    } else {\n      targetSlide = (length - Math.abs(value % length)) % length;\n    }\n    return targetSlide;\n  };\n\n  getTargetSlide = () => {\n    if (!isNil(this.state.infiniteTransitionFrom)) {\n      const mod = this.getTargetMod(this.state.infiniteTransitionFrom);\n      const value = this.getCurrentValue();\n\n      return mod + (value - this.state.infiniteTransitionFrom);\n    }\n    return this.getTargetMod();\n  };\n\n\n  /* event handlers */\n  /**\n   * Handler setting the carouselWidth value in state (used to set proper width of track and slides)\n   * throttled to improve performance\n   * @type {Function}\n   */\n  onResize = throttle(() => {\n    if (!this.node) {\n      return;\n    }\n\n    const arrowLeftWidth = this.arrowLeftNode && this.arrowLeftNode.offsetWidth;\n    const arrowRightWidth = this.arrowRightNode && this.arrowRightNode.offsetWidth;\n    const width = this.node.offsetWidth - (arrowLeftWidth || -2) - (arrowRightWidth || -2);\n\n    this.setState(() => ({\n      carouselWidth: width,\n      windowWidth: window.innerWidth,\n    }));\n  }, config.resizeEventListenerThrottle);\n\n  /**\n   * Function handling beginning of mouse drag by setting index of clicked item and coordinates of click in the state\n   * @param {event} e event\n   * @param {number} index of the element drag started on\n   */\n  onMouseDown = (e, index) => {\n    e.preventDefault();\n    e.stopPropagation();\n    const { pageX } = e;\n    this.setState(() => ({\n      clicked: index,\n      dragStart: pageX,\n    }));\n  };\n\n  /**\n   * Function handling mouse move if drag has started. Sets dragOffset in the state.\n   * @param {event} e event\n   */\n  onMouseMove = e => {\n    const { pageX } = e;\n    if (this.state.dragStart !== null) {\n      this.setState(previousState => ({\n        dragOffset: this.getProp('rtl') ? previousState.dragStart - pageX : pageX - previousState.dragStart,\n      }));\n    }\n  };\n\n  /**\n   * Function handling beginning of touch drag by setting index of touched item and coordinates of touch in the state\n   * @param {event} e event\n   * @param {number} index of the element drag started on\n   */\n  onTouchStart = (e, index) => {\n    const { changedTouches } = e;\n    this.setState(() => ({\n      clicked: index,\n      dragStart: changedTouches[0].pageX,\n    }));\n  };\n\n  /**\n   * Function handling end of touch or mouse drag. If drag was long it changes current slide to the nearest one,\n   * if drag was short (or it was just a click) it changes slide to the clicked (or touched) one.\n   * It resets clicked index, dragOffset and dragStart values in state.\n   * @param {event} e event\n   */\n  onMouseUpTouchEnd = e => {\n    if (this.state.dragStart !== null) {\n      e.preventDefault();\n      if (this.getProp('draggable') && Math.abs(this.state.dragOffset) > config.clickDragThreshold) {\n        this.changeSlide(this.getNearestSlideIndex());\n      } else if (this.getProp('clickToChange')) {\n        this.changeSlide(\n          this.getProp('infinite')\n            ? this.getCurrentValue() + this.state.clicked - this.getActiveSlideIndex()\n            : this.state.clicked,\n        );\n      }\n      this.setState(() => ({\n        clicked: null,\n        dragOffset: 0,\n        dragStart: null,\n        transitionEnabled: true,\n      }));\n    }\n  };\n\n  /**\n   * Handler setting transitionEnabled value in state to false after transition animation ends\n   */\n  onTransitionEnd = () => {\n    const infinite = this.getProp('infinite');\n    this.setState(() => ({\n      transitionEnabled: !infinite,\n      infiniteTransitionFrom: infinite ? this.getCurrentValue() : null,\n    }));\n  };\n\n  /**\n   * Function handling mouse hover over element\n   * Stops auto play\n   */\n  onMouseEnter = () => {\n    this.setState(() => ({\n      isAutoPlayStopped: true,\n    }));\n  };\n\n  /**\n   * Function handling mouse leaving element\n   * Resumes auto play\n   */\n  onMouseLeave = () => {\n    this.setState(() => ({\n      isAutoPlayStopped: false,\n    }));\n    this.resetInterval();\n  };\n\n  /**\n   * Simulates mouse events when touch events occur\n   * @param {event} e A touch event\n   */\n  simulateEvent = e => {\n    const touch = e.changedTouches[0];\n    const {\n      screenX,\n      screenY,\n      clientX,\n      clientY,\n    } = touch;\n    const touchEventMap = {\n      touchstart: 'mousedown',\n      touchmove: 'mousemove',\n      touchend: 'mouseup',\n    };\n    const simulatedEvent = new MouseEvent(\n      touchEventMap[e.type],\n      {\n        bubbles: true,\n        cancelable: true,\n        view: window,\n        detail: 1,\n        screenX,\n        screenY,\n        clientX,\n        clientY,\n      },\n    );\n    touch.target.dispatchEvent(simulatedEvent);\n  };\n\n\n  /* ========== control ========== */\n  /**\n   * Clamps number between 0 and last slide index.\n   * @param {number} value to be clamped\n   * @return {number} new value\n   */\n  clamp = value => {\n    const maxValue = this.getChildren().length - 1;\n    if (value > maxValue) {\n      return maxValue;\n    }\n    if (value < 0) {\n      return 0;\n    }\n    return value;\n  };\n\n  /**\n   * Clamps a provided value and triggers onChange\n   * @param {number} value desired index to change current value to\n   * @return {undefined}\n   */\n  changeSlide = value => this.props.onChange(this.getProp('infinite') ? value : this.clamp(value));\n\n  nextSlide = () => this.changeSlide(this.getCurrentValue() + this.getProp('slidesPerScroll'));\n\n  prevSlide = () => this.changeSlide(this.getCurrentValue() - this.getProp('slidesPerScroll'));\n\n\n  /* ========== positioning ========== */\n  /**\n   * Checks what slide index is the nearest to the current position (to calculate the result of dragging the slider)\n   * @return {number} index\n   */\n  getNearestSlideIndex = () => {\n    let slideIndexOffset = 0;\n    if (this.getProp('keepDirectionWhenDragging')) {\n      if (this.state.dragOffset > 0) {\n        slideIndexOffset = -Math.ceil(this.state.dragOffset / this.getCarouselElementWidth());\n      } else {\n        slideIndexOffset = -Math.floor(this.state.dragOffset / this.getCarouselElementWidth());\n      }\n    } else {\n      slideIndexOffset = -Math.round(this.state.dragOffset / this.getCarouselElementWidth());\n    }\n    return this.getCurrentValue() + slideIndexOffset;\n  };\n\n  /**\n   * Returns the current slide index (from either props or internal state)\n   * @return {number} index\n   */\n  getCurrentSlideIndex = () => {\n    if (this.getProp('infinite')) {\n      return this.getTargetSlide();\n    }\n    return this.clamp(this.getCurrentValue());\n  };\n\n  /**\n   * Calculates width of a single slide in a carousel\n   * @return {number} width of a slide in px\n   */\n  getCarouselElementWidth = () => this.props.itemWidth || this.state.carouselWidth / this.getProp('slidesPerPage');\n\n  /**\n   * Calculates offset in pixels to be applied to Track element in order to show current slide correctly (centered or aligned to the left)\n   * @return {number} offset in px\n   */\n  getTransformOffset = () => {\n    const elementWidthWithOffset = this.getCarouselElementWidth() + this.getProp('offset');\n    const additionalOffset = this.getProp('centered')\n      ? (this.state.carouselWidth / 2) - (elementWidthWithOffset / 2)\n      : 0;\n    const dragOffset = this.getProp('draggable') ? this.state.dragOffset : 0;\n    const currentValue = this.getActiveSlideIndex();\n    const additionalClonesOffset = this.getAdditionalClonesOffset();\n\n    return dragOffset - currentValue * elementWidthWithOffset + additionalOffset - additionalClonesOffset;\n  };\n\n\n  /* ========== rendering ========== */\n  renderCarouselItems = () => {\n    const isRTL = this.getProp('rtl');\n    const transformOffset = this.getTransformOffset();\n    const children = this.getChildren();\n    const numberOfClonesLeft = this.getClonesLeft();\n    const numberOfClonesRight = this.getClonesRight();\n\n    const trackLengthMultiplier = 1 + (this.getProp('infinite') ? numberOfClonesLeft + numberOfClonesRight : 0);\n    const trackWidth = this.state.carouselWidth * children.length * trackLengthMultiplier;\n    const animationSpeed = this.getProp('animationSpeed');\n    const transitionEnabled = this.state.transitionEnabled;\n    const draggable = this.getProp('draggable') && children && children.length > 1;\n\n    const trackStyles = {\n      width: `${trackWidth}px`,\n      transitionDuration: transitionEnabled ? `${animationSpeed}ms, ${animationSpeed}ms` : null,\n    };\n\n    if (isRTL) {\n      trackStyles.marginRight = `${this.getAdditionalClonesOffset()}px`;\n      trackStyles.transform = `translateX(${-transformOffset}px)`;\n    } else {\n      trackStyles.marginLeft = `${this.getAdditionalClonesOffset()}px`;\n      trackStyles.transform = `translateX(${transformOffset}px)`;\n    }\n\n    let slides = children;\n    if (this.getProp('infinite')) {\n      const clonesLeft = times(numberOfClonesLeft, () => children);\n      const clonesRight = times(numberOfClonesRight, () => children);\n      slides = isRTL\n        ? concat(...clonesRight, children, ...clonesLeft)\n        : concat(...clonesLeft, children, ...clonesRight);\n    }\n\n    const isAutoPlay = this.getProp('autoPlay');\n    const isStopAutoPlayOnHover = this.getProp('stopAutoPlayOnHover');\n    const handleAutoPlayEvent = action => (isAutoPlay && isStopAutoPlayOnHover) ? action : null;\n\n    return (\n      <div className=\"Carousel__trackContainer\">\n        <ul\n          className={classnames(\n            'Carousel__track',\n            {\n              'Carousel__track--transition': transitionEnabled,\n              'Carousel__track--draggable': draggable,\n            },\n          )}\n          style={trackStyles}\n          ref={el => this.trackRef = el}\n          onMouseEnter={handleAutoPlayEvent(this.onMouseEnter)}\n          onMouseLeave={handleAutoPlayEvent(this.onMouseLeave)}\n        >\n          {slides.map((carouselItem, index) => (\n            // eslint-disable-next-line no-undefined\n            [null, undefined].includes(carouselItem) ? null : (\n              <CarouselItem\n                key={index}\n                currentSlideIndex={this.getActiveSlideIndex()}\n                index={index}\n                width={this.getCarouselElementWidth()}\n                offset={index !== slides.length ? this.props.offset : 0}\n                onMouseDown={this.onMouseDown}\n                onTouchStart={this.onTouchStart}\n                clickable={this.getProp('clickToChange')}\n                isDragging={Math.abs(this.state.dragOffset) > this.props.minDraggableOffset}\n                isDraggingEnabled={this.props.draggable || this.props.clickToChange}\n              >\n                {carouselItem}\n              </CarouselItem>\n            )\n          ))}\n        </ul>\n      </div>\n    );\n  };\n\n  /**\n   * Adds onClick handler to the arrow if possible (if it does not already have one)\n   * @param {ReactElement} element to render\n   * @param {function} onClick handler to be added to element\n   * @param {string} name of an element\n   * @param {boolean} disable info whether the arrow is disabled\n   * @return {ReactElement} element with added handler\n   */\n  renderArrowWithAddedHandler = (element, onClick, name, disable = false) => (\n    <div\n      className={\n        classnames(\n          'Carousel__customArrows',\n          {\n            'Carousel__arrow--disable': disable,\n          },\n          `Carousel__custom-${name}`,\n        )\n      }\n      ref={el => this[`${name}Node`] = el}\n      onClick={this.getProp('addArrowClickHandler') ? onClick : null}\n    >\n      {element}\n    </div>\n  );\n\n  /**\n   * Renders arrow left\n   * @return {ReactElement} element\n   */\n  renderArrowLeft = () => {\n    const value = this.getCurrentValue();\n    const disabled = value <= 0 && !this.getProp('infinite');\n\n    if (this.getProp('arrowLeft')) {\n      if (!disabled) {\n        return this.renderArrowWithAddedHandler(this.getProp('arrowLeft'), this.prevSlide, 'arrowLeft');\n      }\n      const arrow = this.getProp('arrowLeftDisabled') ? this.getProp('arrowLeftDisabled') : this.getProp('arrowLeft');\n      return this.renderArrowWithAddedHandler(arrow, this.prevSlide, 'arrowLeft', disabled);\n    }\n    if (this.getProp('arrows')) {\n      return (\n        <button\n          className=\"Carousel__arrows Carousel__arrowLeft\"\n          onClick={this.prevSlide}\n          ref={el => this.arrowLeftNode = el}\n          disabled={disabled}\n        >\n          <span>prev</span>\n        </button>\n      );\n    }\n    return null;\n  };\n\n  /**\n   * Renders arrow right\n   * @return {ReactElement} element\n   */\n  renderArrowRight = () => {\n    const slides = this.getChildren();\n    const value = this.getCurrentValue();\n    const lastSlideIndex = slides.length - 1;\n    const disabled = value === lastSlideIndex && !this.getProp('infinite');\n\n    if (this.getProp('arrowRight')) {\n      if (!disabled) {\n        return this.renderArrowWithAddedHandler(this.getProp('arrowRight'), this.nextSlide, 'arrowRight');\n      }\n      const arrow = this.getProp('arrowRightDisabled') ? this.getProp('arrowRightDisabled') : this.getProp('arrowRight');\n      return this.renderArrowWithAddedHandler(arrow, this.nextSlide, 'arrowRight', disabled);\n    }\n    if (this.getProp('arrows')) {\n      return (\n        <button\n          className=\"Carousel__arrows Carousel__arrowRight\"\n          onClick={this.nextSlide}\n          ref={el => this.arrowRightNode = el}\n          disabled={disabled}\n        >\n          <span>next</span>\n        </button>\n      );\n    }\n    return null;\n  };\n\n  renderDots() {\n    if (this.getProp('dots')) {\n      return <Dots value={this.getCurrentValue()} onChange={this.changeSlide} number={this.getChildren().length} rtl={this.getProp('rtl')} />;\n    }\n    return null;\n  }\n\n  render() {\n    const isRTL = this.getProp('rtl');\n    return (\n      <>\n        <div className=\"arrows\">\n          {this.renderArrowLeft()}\n          {this.renderArrowRight()}\n        </div>\n        <div\n          className={classnames('Carousel', this.getProp('className'), isRTL ? 'Carousel--isRTL' : '')}\n          ref={el => this.node = el}\n        >\n          {this.renderCarouselItems()}\n        </div>\n        {this.renderDots()}\n      </>\n    );\n  }\n}\n\nexport default Carousel;"]},"metadata":{},"sourceType":"module"}