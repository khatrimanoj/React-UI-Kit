{"ast":null,"code":"var _jsxFileName = \"/home/mindbox/Documents/manoj/nexus/src/components/Dropdown/dropdownstructure/dropdownmarge/dropdownmarge.js\";\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport ReactDOM from 'react-dom';\nimport Dropdowncontainer from '../dropdowncontainer/dropdownconatiner';\nimport Input from '../dropdownsearch/dropdownsearch';\nimport Button from '../../../button/buttonprop/buttonprop';\n\nclass dropdownmarge extends Component {\n  constructor(props) {\n    super(props);\n\n    this.checkType = value => {\n      this.setState({\n        typeDropdown: value\n      });\n    };\n\n    this.transformJSON = (data, value) => {\n      let newObj = [];\n\n      (function filterJSON(obj, searchValue) {\n        if (obj.name && obj.name.toString().toLowerCase().indexOf(searchValue) > -1) {\n          newObj.push(obj);\n          return;\n        }\n\n        for (var key in obj) {\n          if (typeof obj[key] == \"object\" && obj[key] !== null) {\n            filterJSON(obj[key], searchValue);\n          }\n        }\n      })(data, value);\n\n      return newObj;\n    };\n\n    this.showDropdown = () => {\n      this.setState({\n        isOpen: true\n      });\n      document.addEventListener(\"click\", this.hideDropdown);\n    };\n\n    this.hideDropdown = () => {\n      this.setState({\n        isOpen: false\n      });\n      document.removeEventListener(\"click\", this.hideDropdown);\n    };\n\n    this.handleInput = event => {\n      this.state = {\n        value: event.target.value.toLowerCase()\n      };\n      this.setState({\n        data: this.transformJSON(this.props.data, event.target.value.toLowerCase())\n      });\n      this.setState({\n        isOpen: true\n      });\n      document.removeEventListener(\"click\", this.hideDropdown);\n    };\n\n    this.handleInput = this.handleInput.bind(this);\n    this.showDropdown = this.showDropdown.bind(this);\n    this.updateState = this.updateState.bind(this);\n    this.clearInput = this.clearInput.bind(this);\n    this.state = {\n      data: this.props.data,\n      labelItem: null,\n      typeDropdown: null,\n      selected: null,\n      searcharray: ''\n    };\n  }\n\n  componentWillMount() {\n    const {\n      name\n    } = this.props.data[0];\n    let firstItem = null;\n\n    if (typeof name != 'undefined') {\n      this.checkType(false);\n      firstItem = name;\n    } else {\n      this.checkType(true);\n      firstItem = this.props.data[0];\n    }\n\n    this.setState({\n      labelItem: firstItem\n    });\n  }\n\n  updateState(e) {\n    this.setState({\n      searcharray: e.target.value\n    });\n  }\n\n  clearInput(e) {\n    this.setState({\n      searcharray: ''\n    });\n    this.setState({\n      data: this.transformJSON(this.props.data, e.target.value.toLowerCase())\n    });\n    ReactDOM.findDOMNode(this.refs.inputRef).focus();\n  }\n\n  render() {\n    const {\n      searching,\n      button,\n      size,\n      border,\n      link\n    } = this.props;\n    const dropdownClassname = `\n        dropdown\n        ${size === 'lg' && 'lg-dropdown'}\n        `;\n    const dropdowntoggleclass = `\n        dropdown-toggle\n        ${border === 'false' && 'bordernone'}\n        `;\n    /* dropdown with search start here*/\n\n    let searchinput;\n\n    if (searching === true) {\n      searchinput = React.createElement(Input, {\n        handleChange: this.handleInput,\n        updatevalue: this.updateState,\n        searchvalue: this.state.searcharray,\n        clearInput: this.clearInput,\n        ref: this.inputRef,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 115\n        },\n        __self: this\n      });\n    } else {\n      searchinput = null;\n    }\n    /*dropdown search end here*/\n\n    /*dropdown with button start here*/\n\n\n    let dbutton;\n\n    if (button === true) {\n      dbutton = React.createElement(\"li\", {\n        className: \"no-padding-bottom no-hover-bg d-btnli\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 123\n        },\n        __self: this\n      }, React.createElement(Button, {\n        style: this.props.btnstyle,\n        label: this.props.btnlable,\n        Lefticon: true,\n        icon: this.props.btnicon,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 123\n        },\n        __self: this\n      }));\n    } else {\n      dbutton = null;\n    }\n    /*dropdown with button end here*/\n\n    /*dropdown view all link start here*/\n\n\n    let dlink;\n\n    if (link === true) {\n      dlink = React.createElement(\"li\", {\n        className: \"no-hover-bg\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 136\n        },\n        __self: this\n      }, React.createElement(\"a\", {\n        className: this.props.linkstyle,\n        href: this.props.linkurl,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 136\n        },\n        __self: this\n      }, this.props.linklable));\n    } else {\n      dlink = null;\n    }\n    /*dropdown view all link end here*/\n\n\n    return React.createElement(\"div\", {\n      className: ` ${dropdownClassname} ${this.state.isOpen ? 'open' : ''}`,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 143\n      },\n      __self: this\n    }, React.createElement(\"button\", {\n      className: dropdowntoggleclass,\n      type: \"button\",\n      onClick: this.showDropdown,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 145\n      },\n      __self: this\n    }, this.state.labelItem), React.createElement(\"ul\", {\n      className: \"dropdown-menu\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 149\n      },\n      __self: this\n    }, React.createElement(Dropdowncontainer, {\n      data: this.state.data,\n      onClick: () => this.chooseItem(),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 150\n      },\n      __self: this\n    }, searchinput), dlink, dbutton));\n  }\n\n}\n\ndropdownmarge.propTypes = {\n  data: PropTypes.array.isRequired\n};\ndropdownmarge.defaultProps = {\n  data: []\n};\nexport default dropdownmarge;","map":{"version":3,"sources":["/home/mindbox/Documents/manoj/nexus/src/components/Dropdown/dropdownstructure/dropdownmarge/dropdownmarge.js"],"names":["React","Component","PropTypes","ReactDOM","Dropdowncontainer","Input","Button","dropdownmarge","constructor","props","checkType","value","setState","typeDropdown","transformJSON","data","newObj","filterJSON","obj","searchValue","name","toString","toLowerCase","indexOf","push","key","showDropdown","isOpen","document","addEventListener","hideDropdown","removeEventListener","handleInput","event","state","target","bind","updateState","clearInput","labelItem","selected","searcharray","componentWillMount","firstItem","e","findDOMNode","refs","inputRef","focus","render","searching","button","size","border","link","dropdownClassname","dropdowntoggleclass","searchinput","dbutton","btnstyle","btnlable","btnicon","dlink","linkstyle","linkurl","linklable","chooseItem","propTypes","array","isRequired","defaultProps"],"mappings":"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","sourcesContent":["import React, { Component} from 'react';\nimport PropTypes from 'prop-types';\nimport ReactDOM from 'react-dom';\n\nimport Dropdowncontainer from '../dropdowncontainer/dropdownconatiner';\nimport Input from '../dropdownsearch/dropdownsearch';\nimport Button from '../../../button/buttonprop/buttonprop';\n\nclass dropdownmarge extends Component {\n    static propTypes = {\n        data: PropTypes.array.isRequired\n      };\n      static defaultProps = {\n        data: []\n      };\n      \n    constructor(props) {\n        super(props);\n        this.handleInput=this.handleInput.bind(this);\n        this.showDropdown = this.showDropdown.bind(this);\n        this.updateState = this.updateState.bind(this);\n        this.clearInput = this.clearInput.bind(this);\n\n\n        \n        this.state={\n            data:this.props.data,\n            labelItem: null,\n            typeDropdown: null,\n            selected: null,\n            searcharray: '',\n\n        };\n    }\n    componentWillMount() {\n        const { name } = this.props.data[0];\n        let firstItem = null;    \n        if (typeof name != 'undefined') {\n          this.checkType(false);\n          firstItem = name;\n        } else {\n          this.checkType(true);\n          firstItem = this.props.data[0];\n        }        \n        this.setState({\n            labelItem: firstItem\n        });    \n      }\n      \n    \n      checkType = (value) => {\n        this.setState({\n            typeDropdown: value\n        });    \n      };\n      \n    transformJSON=(data, value)=>{\n    let newObj=[];\n        (function filterJSON(obj, searchValue)\n        {\n            if(obj.name && (obj.name.toString().toLowerCase().indexOf(searchValue) >-1)){\n                newObj.push(obj);\n                return\n            }\n            for (var key in obj)\n            {\n                if (typeof obj[key] == \"object\" && obj[key] !== null){\n                    filterJSON(obj[key],searchValue);\n                }\n            }\n        })(data, value);\n        return newObj;\n    };\n    showDropdown = () => {\n        this.setState({ isOpen: true });\n        document.addEventListener(\"click\", this.hideDropdown);\n      };\n      hideDropdown = () => {\n        this.setState({ isOpen: false });\n        document.removeEventListener(\"click\", this.hideDropdown);\n      };\n    handleInput=(event) =>{\n      this.state={\n            value:event.target.value.toLowerCase()\n        };\n        this.setState({data: this.transformJSON(this.props.data,event.target.value.toLowerCase())});\n        this.setState({ isOpen: true });\n        document.removeEventListener(\"click\", this.hideDropdown);\n    };\n \n    updateState(e) {\n      this.setState({searcharray: e.target.value});\n      \n   }\n    clearInput(e) {\n      this.setState({searcharray: ''});\n      this.setState({data: this.transformJSON(this.props.data,e.target.value.toLowerCase())});\n      ReactDOM.findDOMNode(this.refs.inputRef).focus();\n   }\n  \n    render() {\n      \n        const {searching,button,size,border,link} = this.props ;\n        const dropdownClassname = `\n        dropdown\n        ${size === 'lg' && 'lg-dropdown'}\n        `;   \n        const  dropdowntoggleclass = `\n        dropdown-toggle\n        ${border === 'false' && 'bordernone'}\n        `;   \n        /* dropdown with search start here*/\n        let searchinput;\n        if (searching === true) {\n          searchinput = <Input handleChange={this.handleInput} updatevalue={this.updateState} searchvalue={this.state.searcharray} clearInput={this.clearInput}  ref={this.inputRef}/>;\n        } else {\n          searchinput = null;\n        }\n        /*dropdown search end here*/\n        /*dropdown with button start here*/\n        let dbutton;\n        if (button === true) {\n          dbutton = <li  className=\"no-padding-bottom no-hover-bg d-btnli\"><Button\n          style={this.props.btnstyle} \n          label={this.props.btnlable} \n          Lefticon={true}\n          icon={this.props.btnicon}\n           /></li>;\n        } else {\n          dbutton = null;\n        }\n        /*dropdown with button end here*/\n        /*dropdown view all link start here*/\n        let dlink;\n        if (link === true) {\n          dlink = <li className=\"no-hover-bg\"><a className={this.props.linkstyle} href={this.props.linkurl}>{ this.props.linklable}</a></li>;\n        } else {\n          dlink = null;\n        }\n        /*dropdown view all link end here*/\n\n        return (\n            <div className={ ` ${dropdownClassname} ${this.state.isOpen ? 'open' : ''}`} >\n                \n                <button  className={dropdowntoggleclass} type=\"button\" onClick={this.showDropdown}>\n               {this.state.labelItem}\n              \n            </button>\n                <ul className=\"dropdown-menu\">\n                <Dropdowncontainer  data={this.state.data} onClick={() => this.chooseItem()} >\n                  {searchinput}\n                </Dropdowncontainer>\n                {dlink}\n                {dbutton}\n                </ul>\n            </div>\n        );\n    }\n}\n\nexport default dropdownmarge;"]},"metadata":{},"sourceType":"module"}