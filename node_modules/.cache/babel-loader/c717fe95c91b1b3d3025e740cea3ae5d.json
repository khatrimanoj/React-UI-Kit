{"ast":null,"code":"import _slicedToArray from\"/home/mindbox/Documents/manoj/nexus/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import React,{useEffect,useState}from'react';var CircularIndicators=function CircularIndicators(props){var _useState=useState(0),_useState2=_slicedToArray(_useState,2),offset=_useState2[0],setOffset=_useState2[1];var size=props.size,progress=props.progress,strokeWidth=props.strokeWidth,circleOneStroke=props.circleOneStroke,circleTwoStroke=props.circleTwoStroke,className=props.className;var center=size/2;var radius=size/2-strokeWidth/2;var circumference=2*Math.PI*radius;useEffect(function(){var progressOffset=(100-progress)/100*circumference;setOffset(progressOffset);},[setOffset,progress,circumference,offset]);return React.createElement(\"svg\",{className:className,width:size,height:size,fill:\"transparent\"},React.createElement(\"circle\",{className:\"circular-bg\",stroke:circleOneStroke,cx:center,cy:center,r:radius,strokeWidth:strokeWidth}),React.createElement(\"circle\",{className:\"circle-bar\",stroke:circleTwoStroke,cx:center,cy:center,r:radius,strokeWidth:strokeWidth,strokeDasharray:circumference,strokeDashoffset:offset}));};export default CircularIndicators;","map":{"version":3,"sources":["/home/mindbox/Documents/manoj/nexus/src/components/ProgressIndicators/Types/CircularIndicators.js"],"names":["React","useEffect","useState","CircularIndicators","props","offset","setOffset","size","progress","strokeWidth","circleOneStroke","circleTwoStroke","className","center","radius","circumference","Math","PI","progressOffset"],"mappings":"0JAAA,MAAOA,CAAAA,KAAP,EAAgBC,SAAhB,CAA2BC,QAA3B,KAA2C,OAA3C,CAEA,GAAMC,CAAAA,kBAAkB,CAAG,QAArBA,CAAAA,kBAAqB,CAAAC,KAAK,CAAI,eACJF,QAAQ,CAAC,CAAD,CADJ,wCACzBG,MADyB,eACjBC,SADiB,kBAG5BC,CAAAA,IAH4B,CAS5BH,KAT4B,CAG5BG,IAH4B,CAI5BC,QAJ4B,CAS5BJ,KAT4B,CAI5BI,QAJ4B,CAK5BC,WAL4B,CAS5BL,KAT4B,CAK5BK,WAL4B,CAM5BC,eAN4B,CAS5BN,KAT4B,CAM5BM,eAN4B,CAO5BC,eAP4B,CAS5BP,KAT4B,CAO5BO,eAP4B,CAQ5BC,SAR4B,CAS5BR,KAT4B,CAQ5BQ,SAR4B,CAWhC,GAAMC,CAAAA,MAAM,CAAGN,IAAI,CAAG,CAAtB,CACA,GAAMO,CAAAA,MAAM,CAAGP,IAAI,CAAE,CAAN,CAAUE,WAAW,CAAG,CAAvC,CACA,GAAMM,CAAAA,aAAa,CAAG,EAAIC,IAAI,CAACC,EAAT,CAAcH,MAApC,CAEAb,SAAS,CAAC,UAAM,CACZ,GAAMiB,CAAAA,cAAc,CAAI,CAAC,IAAMV,QAAP,EAAmB,GAApB,CAA2BO,aAAlD,CACAT,SAAS,CAACY,cAAD,CAAT,CACH,CAHQ,CAGN,CAACZ,SAAD,CAAYE,QAAZ,CAAsBO,aAAtB,CAAqCV,MAArC,CAHM,CAAT,CAKA,MACI,4BACI,SAAS,CAAEO,SADf,CAEI,KAAK,CAAEL,IAFX,CAGI,MAAM,CAAEA,IAHZ,CAII,IAAI,CAAC,aAJT,EAMI,8BACI,SAAS,CAAC,aADd,CAEI,MAAM,CAAEG,eAFZ,CAGI,EAAE,CAAEG,MAHR,CAII,EAAE,CAAEA,MAJR,CAKI,CAAC,CAAEC,MALP,CAMI,WAAW,CAAEL,WANjB,EANJ,CAeI,8BACI,SAAS,CAAC,YADd,CAEI,MAAM,CAAEE,eAFZ,CAGI,EAAE,CAAEE,MAHR,CAII,EAAE,CAAEA,MAJR,CAKI,CAAC,CAAEC,MALP,CAMI,WAAW,CAAEL,WANjB,CAOI,eAAe,CAAEM,aAPrB,CAQI,gBAAgB,CAAEV,MARtB,EAfJ,CADJ,CA8BH,CAlDD,CAmDA,cAAeF,CAAAA,kBAAf","sourcesContent":["import React, { useEffect, useState } from 'react';\n\nconst CircularIndicators = props => {\n    const [offset, setOffset] = useState(0);\n    const {\n        size,\n        progress,\n        strokeWidth,\n        circleOneStroke,\n        circleTwoStroke,\n        className,\n    } = props;\n\n    const center = size / 2;\n    const radius = size/ 2 - strokeWidth / 2;\n    const circumference = 2 * Math.PI * radius;\n\n    useEffect(() => {\n        const progressOffset = ((100 - progress) / 100) * circumference;\n        setOffset(progressOffset);\n    }, [setOffset, progress, circumference, offset]);\n\n    return (\n        <svg \n            className={className}\n            width={size}\n            height={size}\n            fill=\"transparent\"\n        >\n            <circle\n                className=\"circular-bg\"\n                stroke={circleOneStroke}\n                cx={center}\n                cy={center}\n                r={radius}\n                strokeWidth={strokeWidth}\n            >\n            </circle>\n            <circle\n                className=\"circle-bar\"\n                stroke={circleTwoStroke}\n                cx={center}\n                cy={center}\n                r={radius}\n                strokeWidth={strokeWidth}\n                strokeDasharray={circumference}\n                strokeDashoffset={offset}\n            >\n                \n            </circle>\n        </svg>\n    );\n}\nexport default CircularIndicators;"]},"metadata":{},"sourceType":"module"}